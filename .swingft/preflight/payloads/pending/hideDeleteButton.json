{
  "swift_code": "//\n//  RemoteUrlPresetButtonView.swift\n//  StealPlateSwift\n//\n//  Created by 심재빈 on 2023/09/19.\n//\n\nimport Foundation\nimport UIKit\n\nclass RemoteUrlPresetButtonView: UIView {\n    static var reuseIdentifier: String {\n        get {\n            return \"RemoteUrlPresetButtonView\"\n        }\n    }\n    \n    static var currentSelectedButton: RemoteUrlPresetButtonView?\n\n    var index: Int!\n    var remoteUrl: URL!\n    var buttonClickFeedback: UIImpactFeedbackGenerator!\n    var buttonTapped: ((URL?) -> Void)?\n    var deletePreset: ((Int?) -> Void)?\n    var clearRemoteUrl: (() -> ())?\n    var savePresetUrl: ((Int) -> ())?\n    var mainSettingViewControllerTapGesture: UITapGestureRecognizer? {\n        didSet {\n            mainSettingViewControllerTapGesture?.addTarget(self, action: #selector(tapMainSettingViewController))\n        }\n    }\n\n    lazy var remoteUrlPresetButton: UIButton = {\n        let button = UIButton()\n\n        button.setTitle(StringConstants.preset, for: .normal)\n        button.titleLabel?.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        button.setTitleColor(.white, for: .normal)\n        button.backgroundColor = .gray\n        button.layer.cornerRadius = CGFloat(NumberConstants.settingButtonCornerRadius)\n        button.contentEdgeInsets = UIEdgeInsets(\n            top: CGFloat(NumberConstants.settingButtonContentEdgeInsetsTop),\n            left: CGFloat(NumberConstants.settingButtonContentEdgeInsetsLeft),\n            bottom: CGFloat(NumberConstants.settingButtonContentEdgeInsetsBottom),\n            right: CGFloat(NumberConstants.settingButtonContentEdgeInsetsRight)\n        )\n        \n        button.addTarget(self, action: #selector(handleRemoteUrlPresetButtonTap), for: .touchUpInside)\n        \n        return button\n    }()\n    \n    lazy var deleteButton: UIButton = {\n        let button = UIButton()\n        \n        button.setTitle(StringConstants.deleteSymbol, for: .normal)\n        button.titleLabel?.font = .systemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize * 2))\n        button.setTitleColor(.red, for: .normal)\n        button.backgroundColor = .white\n        button.layer.cornerRadius = CGFloat(NumberConstants.deleteRemoteUrlPresetButtonSize / 2)\n        button.contentEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 4, right: 0)\n        button.isHidden = true\n        \n        button.addTarget(self, action: #selector(deleteButtonTapped), for: .touchUpInside)\n        \n        return button\n    }()\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        \n        setupViews()\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: .zero)\n        \n        setupViews()\n    }\n    \n    private func setupViews() {\n        addSubview(remoteUrlPresetButton)\n        \n        remoteUrlPresetButton.snp.makeConstraints { make in\n            make.top.bottom.leading.trailing.equalToSuperview()\n        }\n        \n        addSubview(deleteButton)\n        \n        deleteButton.snp.makeConstraints { make in\n            make.top.right.equalToSuperview()\n            make.width.height.equalTo(NumberConstants.deleteRemoteUrlPresetButtonSize)\n        }\n        \n        let longPress = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress))\n        addGestureRecognizer(longPress)\n    }\n    \n    func setTitleWithIndex(_ index: Int) {\n        remoteUrlPresetButton.setTitle(\"Preset \\(index + 1)\", for: .normal)\n    }\n    \n    @objc private func handleRemoteUrlPresetButtonTap() {\n        buttonClickFeedback.impactOccurred()\n\n        RemoteUrlPresetButtonView.currentSelectedButton?.remoteUrlPresetButton.isSelected = false\n        RemoteUrlPresetButtonView.currentSelectedButton?.remoteUrlPresetButton.backgroundColor = .gray\n\n        remoteUrlPresetButton.isSelected = true\n        remoteUrlPresetButton.backgroundColor = .black\n\n        RemoteUrlPresetButtonView.currentSelectedButton = self\n        \n        buttonTapped?(remoteUrl)\n    }\n    \n    private func deselectCurrentPresetButton() {\n        RemoteUrlPresetButtonView.currentSelectedButton?.remoteUrlPresetButton.isSelected = false\n        RemoteUrlPresetButtonView.currentSelectedButton?.remoteUrlPresetButton.backgroundColor = .gray\n    }\n    \n    @objc func handleLongPress(gesture: UILongPressGestureRecognizer) {\n        if gesture.state == .began {\n            buttonClickFeedback.impactOccurred()\n\n            let shakeAnimation = CABasicAnimation(keyPath: \"transform.rotation\")\n            shakeAnimation.duration = 0.1\n            shakeAnimation.repeatCount = .infinity\n            shakeAnimation.autoreverses = true\n            shakeAnimation.fromValue = NSNumber(value: Double.pi / 64)\n            shakeAnimation.toValue = NSNumber(value: -Double.pi / 64)\n            layer.add(shakeAnimation, forKey: \"shakeAnimation\")\n\n            deleteButton.isHidden = false\n            \n            handleRemoteUrlPresetButtonTap()\n        }\n    }\n    \n    func hideDeleteButton() {\n        self.deleteButton.isHidden = true\n        self.layer.removeAnimation(forKey: \"shakeAnimation\")\n    }\n    \n    @objc func deleteButtonTapped() {\n        deletePreset?(index)\n    }\n    \n    @objc func tapMainSettingViewController() {\n        if remoteUrlPresetButton.isSelected {\n            hideDeleteButton()\n            savePresetUrl?(index)\n            deselectCurrentPresetButton()\n        }\n    }\n    \n}",
  "ast_symbols": [
    {
      "symbolName": "hideDeleteButton()",
      "symbolKind": "method"
    }
  ],
  "target_identifier": "hideDeleteButton"
}