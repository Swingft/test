{
  "swift_code": "//\n//  MainSettingViewController.swift\n//  StealPlateSwift\n//\n//  Created by 스틸리언 on 2022/09/07.\n//\n\nimport UIKit\nimport SnapKit\nimport RxRelay\n\nclass MainSettingViewController: BaseViewController {\n    public var viewModel: MainViewModel = DependencyInjector.mainViewModel()\n    \n    var dismissCompletion: ((_: MainSettingViewController) -> Void)!\n    var setRemoteUrl: URL?\n    private var resetButtonInitialWidth: CGFloat?\n    private var antiCaptureActivateButtonInitialWidth: CGFloat?\n    lazy var tapGesture = UITapGestureRecognizer(target: self, action: nil)\n    \n    let buttonClickFeedback = UIImpactFeedbackGenerator(style: .medium)\n    \n    // MARK: - View\n    \n    lazy var sampleTextView: UITextView = {\n        let textView = UITextView()\n        textView.backgroundColor = .white\n        textView.textColor = .black\n        textView.textAlignment = .left\n        textView.font = .systemFont(ofSize: 5, weight: .light)\n        textView.isEditable = true\n        \n        return textView\n    }()\n    \n    lazy var remainOfContentView: UIView = {\n        let view = UIView()\n        \n        view.backgroundColor = .clear\n        \n        view.addGestureRecognizer(UITapGestureRecognizer(\n            target: self, action: #selector(tapDismiss(_ :)))\n        )\n        \n        return view\n    }()\n    \n    lazy var contentView: UIView = {\n        let view = UIView()\n        \n        view.setRounded(50)\n        view.backgroundColor = .white\n        \n        return view\n    }()\n    \n    lazy var mainTitleLabel: UILabel = {\n        let label = UILabel()\n        \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(36))\n        label.textColor = .black\n        label.text = StringConstants.setting\n        \n        return label\n    }()\n    \n    lazy var settingScrollViewContent: UIView = {\n        let view = UIView()\n        \n        return view\n    }()\n    \n    // MARK: - Remote URL\n    \n    lazy var setRemoteUrlTitleLabel: UILabel = {\n        let label = UILabel()\n        \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        label.textColor = .black\n        label.text = StringConstants.setRemoteUrlViewTitle\n        \n        return label\n    }()\n    \n    lazy var setRemoteUrlTextField: UITextField = {\n        let textField = UITextField()\n\n        textField.setRounded()\n        textField.setBorder(.black, 8)\n        textField.layer.cornerRadius = 4\n        textField.backgroundColor = .white\n        textField.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        textField.textColor = .black\n        textField.placeholder = StringConstants.setRemoteUrlTextFieldPlaceholder\n        textField.addLeftPadding()\n        \n        textField.delegate = self\n\n        return textField\n    }()\n    \n    lazy var resetButton: UIButton = {\n        let button = UIButton()\n        \n        button.setTitle(StringConstants.reset, for: .normal)\n        button.titleLabel?.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        button.setTitleColor(.white, for: .normal)\n        button.backgroundColor = .black\n        button.layer.cornerRadius = CGFloat(NumberConstants.settingButtonCornerRadius)\n        button.contentEdgeInsets = UIEdgeInsets(\n            top: CGFloat(NumberConstants.settingButtonContentEdgeInsetsTop),\n            left: CGFloat(NumberConstants.settingButtonContentEdgeInsetsLeft),\n            bottom: CGFloat(NumberConstants.settingButtonContentEdgeInsetsBottom),\n            right: CGFloat(NumberConstants.settingButtonContentEdgeInsetsRight)\n        )\n        \n        resetButtonInitialWidth = button.intrinsicContentSize.width\n        \n        button.addTarget(self, action: #selector(tapRemoteUrlResetButton(_:)), for: .touchUpInside)\n        \n        return button\n    }()\n    \n    // MARK: - Remote URL Preset\n    \n    lazy var loadRemoteUrlPresetTitleLabel: UILabel = {\n        let label = UILabel()\n        \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        label.textColor = .black\n        label.text = StringConstants.setRemoteUrlPresetViewTitle\n        \n        return label\n    }()\n    \n    lazy var remoteUrlPresetStackView: UIStackView = {\n        let stackView = UIStackView()\n        \n        stackView.axis = .horizontal\n        stackView.alignment = .leading\n        stackView.distribution = .fill\n        stackView.spacing = CGFloat(NumberConstants.settingStackViewSpacing)\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        \n        return stackView\n    }()\n    \n    lazy var remoteUrlPresetStackScrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        scrollView.showsHorizontalScrollIndicator = false\n        scrollView.showsVerticalScrollIndicator = false\n        \n        return scrollView\n    }()\n    \n    lazy var remoteUrlPresetClearButton: UIButton = {\n        let button = UIButton()\n\n        button.setTitle(StringConstants.clear, for: .normal)\n        button.titleLabel?.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        button.setTitleColor(.white, for: .normal)\n        button.setBackgroundColor(color: .gray, forState: .normal, cornerRadius: CGFloat(NumberConstants.settingButtonCornerRadius))\n        button.setBackgroundColor(color: .black, forState: .highlighted, cornerRadius: CGFloat(NumberConstants.settingButtonCornerRadius))\n        button.contentEdgeInsets = UIEdgeInsets(\n            top: CGFloat(NumberConstants.settingButtonContentEdgeInsetsTop),\n            left: CGFloat(NumberConstants.settingButtonContentEdgeInsetsLeft),\n            bottom: CGFloat(NumberConstants.settingButtonContentEdgeInsetsBottom),\n            right: CGFloat(NumberConstants.settingButtonContentEdgeInsetsRight)\n        )\n\n        button.addTarget(self, action: #selector(tapRemoteUrlPresetClearButton), for: .touchUpInside)\n\n        return button\n    }()\n    \n    lazy var remoteUrlPresetAddButton: UIButton = {\n        let button = UIButton()\n        \n        button.setTitle(StringConstants.plusSymbol, for: .normal)\n        button.titleLabel?.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        button.setTitleColor(.white, for: .normal)\n        button.setBackgroundColor(color: .gray, forState: .normal, cornerRadius: CGFloat(NumberConstants.settingButtonCornerRadius))\n        button.setBackgroundColor(color: .black, forState: .highlighted, cornerRadius: CGFloat(NumberConstants.settingButtonCornerRadius))\n        button.contentEdgeInsets = UIEdgeInsets(\n            top: CGFloat(NumberConstants.settingButtonContentEdgeInsetsTop),\n            left: CGFloat(NumberConstants.settingButtonContentEdgeInsetsLeft),\n            bottom: CGFloat(NumberConstants.settingButtonContentEdgeInsetsBottom),\n            right: CGFloat(NumberConstants.settingButtonContentEdgeInsetsRight)\n        )\n\n        button.addTarget(self, action: #selector(tapRemoteUrlPresetAddButton), for: .touchUpInside)\n\n        return button\n    }()\n    \n    lazy var stealienImage: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        \n        return imageView\n    }()\n\n    // MARK: - Override\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n//        if let sampleJsonData = DataReader.dataReader().readFileInBundle(name: \"sample\", ext: \"json\") {\n//            \n//            let jsonString = String(data: sampleJsonData, encoding: .utf8)\n//            sampleTextView.text = jsonString\n//            \n//        }\n        \n//        if let sampleJsonData = AS_Decrypt_Resource(\"sample\", \"json\") {\n//            sampleTextView.text = String(data: sampleJsonData, encoding: .utf8) ?? \"decrypted sample.json load fail\"\n//            NSLog(sampleTextView.text)\n//        } else {\n//            sampleTextView.text = \"decrypted sample.json load fail\"\n//        }\n//        \n//        if let stealienImageData = AS_Decrypt_Resource(\"Stealien\", \"png\") {\n//            if let image = UIImage(data: stealienImageData) {\n//                self.stealienImage.image = image\n//            }\n//        }\n    }\n    \n    override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n    }\n    \n    override func setupVC() {\n        super.setupVC()\n        \n        view.backgroundColor = .clear\n        view.addGestureRecognizer(tapGesture)\n        view.addSubview(contentView)\n        view.addSubview(remainOfContentView)\n        \n        contentView.addSubview(mainTitleLabel)\n        contentView.addSubview(sampleTextView)\n        contentView.addSubview(stealienImage)\n        contentView.addSubview(settingScrollViewContent)\n\n        contentView.snp.makeConstraints { make in\n            make.bottom.equalToSuperview()\n            make.leading.equalToSuperview()\n            make.trailing.equalToSuperview()\n            make.height.equalTo(600)\n        }\n        \n        remainOfContentView.snp.makeConstraints { make in\n            make.top.equalToSuperview()\n            make.leading.equalToSuperview()\n            make.trailing.equalToSuperview()\n            make.bottom.equalTo(contentView.snp.top)\n        }\n        \n        mainTitleLabel.snp.makeConstraints { make in\n            make.top.equalToSuperview().offset(NumberConstants.layoutMarginLarge)\n            make.leading.equalToSuperview().offset(NumberConstants.layoutMarginLarge)\n        }\n        \n        sampleTextView.snp.makeConstraints { make in\n            make.top.equalTo(mainTitleLabel.snp.bottom)\n            make.leading.equalToSuperview()\n            make.trailing.equalToSuperview()\n            make.height.equalToSuperview().dividedBy(4)\n        }\n        \n        stealienImage.snp.makeConstraints { make in\n            make.top.equalTo(sampleTextView.snp.bottom)\n            make.leading.equalToSuperview()\n            make.trailing.equalToSuperview()\n            make.height.equalToSuperview().dividedBy(4)\n        }\n        \n        settingScrollViewContent.snp.makeConstraints { make in\n            make.top.equalTo(stealienImage.snp.bottom).offset(NumberConstants.layoutMarginLarge)\n            make.leading.equalToSuperview().offset(NumberConstants.layoutMarginLarge)\n            make.trailing.equalToSuperview().offset(-NumberConstants.layoutMarginLarge)\n            make.bottom.equalToSuperview().offset(-NumberConstants.layoutMarginMidium)\n        }\n        \n        // MARK: - Remote URL\n        \n        settingScrollViewContent.addSubview(setRemoteUrlTitleLabel)\n        settingScrollViewContent.addSubview(setRemoteUrlTextField)\n        settingScrollViewContent.addSubview(resetButton)\n        \n        setRemoteUrlTitleLabel.snp.makeConstraints { make in\n            make.top.equalToSuperview()\n            make.leading.equalToSuperview()\n        }\n        \n        setRemoteUrlTextField.snp.makeConstraints { make in\n            make.top.equalTo(setRemoteUrlTitleLabel.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n            make.leading.equalToSuperview()\n            make.trailing.equalTo(resetButton.snp.leading).offset(-NumberConstants.settingContentLayoutMarginMin)\n            make.height.equalTo(resetButton.snp.height)\n        }\n        \n        resetButton.snp.makeConstraints { make in\n            make.top.equalTo(setRemoteUrlTitleLabel.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n            make.trailing.equalToSuperview()\n            make.width.equalTo(resetButtonInitialWidth!)\n        }\n        \n        // MARK: - Remote URL Preset\n\n        settingScrollViewContent.addSubview(loadRemoteUrlPresetTitleLabel)\n        \n        settingScrollViewContent.addSubview(remoteUrlPresetClearButton)\n        \n        settingScrollViewContent.addSubview(remoteUrlPresetStackScrollView)\n        remoteUrlPresetStackScrollView.addSubview(remoteUrlPresetStackView)\n        \n        loadRemoteUrlPresetTitleLabel.snp.makeConstraints { make in\n            make.top.equalTo(setRemoteUrlTextField.snp.bottom).offset(NumberConstants.layoutMarginMidium)\n            make.leading.trailing.equalToSuperview()\n        }\n        \n        remoteUrlPresetClearButton.snp.makeConstraints { make in\n            make.top.equalTo(loadRemoteUrlPresetTitleLabel.snp.bottom).offset(NumberConstants.layoutMarginMin)\n            make.leading.equalToSuperview()\n        }\n        \n        remoteUrlPresetStackScrollView.snp.makeConstraints { make in\n            make.top.equalTo(remoteUrlPresetClearButton)\n            make.leading.equalTo(remoteUrlPresetClearButton.snp.trailing).offset(NumberConstants.settingStackViewSpacing)\n            make.trailing.equalToSuperview()\n        }\n\n        remoteUrlPresetStackView.snp.makeConstraints { make in\n            make.top.bottom.leading.trailing.equalToSuperview()\n        }\n        \n    }\n    \n    override func setupVM() {\n        super.setupVM()\n    }\n    \n    override func setupBind() {\n        super.setupBind()\n        \n        viewModel.remoteUrlPresetDataSequence.bind(onNext: { [self] (items) in\n            \n            UIView.animate(withDuration: 0.3, animations: { [self] in\n                \n                // Remove all previous views from the stack view\n                remoteUrlPresetStackView.arrangedSubviews.forEach { $0.removeFromSuperview() }\n                \n                // Add Preset Button\n                items.enumerated().forEach { (index, item) in\n                    let remoteUrlPresetButton = RemoteUrlPresetButtonView()\n\n                    remoteUrlPresetButton.index = index\n                    remoteUrlPresetButton.remoteUrl = item\n                    remoteUrlPresetButton.buttonClickFeedback = buttonClickFeedback\n                    remoteUrlPresetButton.setTitleWithIndex(index)\n                    remoteUrlPresetButton.clearRemoteUrl = clearRemoteUrl\n                    remoteUrlPresetButton.mainSettingViewControllerTapGesture = tapGesture\n                    remoteUrlPresetButton.savePresetUrl = savePresetUrl\n                    remoteUrlPresetButton.buttonTapped = { item in\n                        self.setRemoteUrlTextField.text = item?.absoluteString\n                        self.setRemoteUrl = item\n                    }\n                    remoteUrlPresetButton.deletePreset = { index in\n                        self.viewModel.deleteRemoteUrlPresetData(index: index!)\n                    }\n                    remoteUrlPresetStackView.addArrangedSubview(remoteUrlPresetButton)\n                }\n                \n                // Add Preset Plus Button\n                remoteUrlPresetStackView.addArrangedSubview(remoteUrlPresetAddButton)\n                \n                // Set Stack Scroll View Height\n                if let firstButton = remoteUrlPresetStackView.arrangedSubviews.first {\n                    remoteUrlPresetStackScrollView.snp.makeConstraints { make in\n                        make.height.equalTo(firstButton.snp.height)\n                    }\n                }\n                \n            })\n\n        }).disposed(by: disposeBag)\n        \n    }\n    \n    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n        self.view.endEditing(true)\n    }\n    \n    // MARK: - Private func\n    \n    @objc\n    private func tapDismiss(_ sender: UITapGestureRecognizer) {\n        self.dismiss(animated: true) {\n            self.dismissCompletion(self)\n        }\n    }\n    \n    @objc\n    private func tapRemoteUrlResetButton(_ sender: UIButton) {\n        buttonClickFeedback.impactOccurred()\n\n        setRemoteUrlTextField.text = \"\"\n        setRemoteUrl = URL(string: StringConstants.remoteRestaurantJsonUrl)\n    }\n    \n    @objc\n    private func tapRemoteUrlPresetClearButton(_ sender: UIButton) {\n        buttonClickFeedback.impactOccurred()\n\n        let alertController = UIAlertController(title: StringConstants.removeAllPresetAlertTitle, message: StringConstants.removeAllPresetAlertMessage, preferredStyle: .alert)\n        \n        let deleteAction = UIAlertAction(title: StringConstants.alertRemove, style: .destructive) { [weak self] _ in\n            self?.viewModel.removeAllRemoteUrlPresetData()\n        }\n        alertController.addAction(deleteAction)\n        \n        let cancelAction = UIAlertAction(title: StringConstants.alertCancle, style: .cancel, handler: nil)\n        alertController.addAction(cancelAction)\n\n        present(alertController, animated: true, completion: nil)\n    }\n    \n    @objc\n    private func tapRemoteUrlPresetAddButton(_ sender: UIButton) {\n        buttonClickFeedback.impactOccurred()\n        \n        viewModel.addRemoteUrlPresetData()\n    }\n    \n    private func clearRemoteUrl() {\n        setRemoteUrl = URL(string: StringConstants.remoteRestaurantJsonUrl)\n        setRemoteUrlTextField.text = \"\"\n        setRemoteUrlTextField.placeholder = StringConstants.setRemoteUrlTextFieldPlaceholder\n    }\n    \n    func savePresetUrl(index: Int) {\n        guard index < viewModel.remoteUrlPresetData.count else {\n            return\n        }\n        \n        viewModel.editRemoteUrlPresetData(index: index, url: setRemoteUrl!)\n    }\n    \n    func activateSecretSettings() {\n        remoteUrlPresetStackView.snp.makeConstraints { make in\n            make.top.leading.trailing.equalToSuperview()\n        }\n        \n        let antiCaptureSettingView = activateAntiCaptureSettingView(topView: remoteUrlPresetStackView)\n//        let vpnBlockSettingView = activeVPNBlockSettingView(topView: remoteUrlPresetStackView)\n    }\n    \n    func activateAntiCaptureSettingView(topView: UIView) -> UIView {\n        BaseViewController.sharedAntiCapture = true\n        \n        let antiCaptureSettingView = AntiCaptureSettingView()\n        settingScrollViewContent.addSubview(antiCaptureSettingView)\n        antiCaptureSettingView.snp.makeConstraints { make in\n            make.top.equalTo(topView.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n            make.leading.trailing.bottom.equalToSuperview()\n        }\n        \n        antiCaptureSettingView.setupViews()\n        return antiCaptureSettingView\n    }\n    \n//    func activeVPNBlockSettingView(topView: UIView) -> UIView {\n////        BaseViewController.sharedAntiCapture = true\n//        \n//        let vpnBlockSettingView = VPNBlockSettingView()\n//        settingScrollViewContent.addSubview(vpnBlockSettingView)\n//        vpnBlockSettingView.snp.makeConstraints { make in\n//            make.top.equalTo(topView.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n//            make.leading.trailing.bottom.equalToSuperview()\n//        }\n//        \n//        vpnBlockSettingView.setupViews()\n//        return vpnBlockSettingView\n//    }\n    \n}\n\nextension MainSettingViewController: UITextFieldDelegate {\n    func textFieldDidEndEditing(_ textField: UITextField) {\n        if textField.text?.lowercased() == StringConstants.activateSecretSettingsCode {\n            setRemoteUrlTextField.text = \"\"\n            activateSecretSettings()\n            return\n        }\n        \n        guard let inputText = textField.text,\n              let encodedString = inputText.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed),\n              let url = URL(string: encodedString) else {\n            clearRemoteUrl()\n            return\n        }\n        \n        setRemoteUrl = url\n    }\n}",
  "ast_symbols": [
    {
      "symbolName": "setBackgroundColor",
      "symbolKind": "unknown"
    }
  ],
  "target_identifier": "setBackgroundColor"
}