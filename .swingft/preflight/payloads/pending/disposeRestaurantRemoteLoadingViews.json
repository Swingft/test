{
  "swift_code": "//\n//  MainViewModel.swift\n//  StealPlateSwift\n//\n//  Created by 심재빈 on 2022/09/20.\n//\n\nimport Foundation\nimport UIKit\nimport RxSwift\nimport RxCocoa\nimport RxDataSources\n\nclass MainViewModel {\n    var disposeBag: DisposeBag = DisposeBag()\n    var mainScrollViewRefreshControl: UIRefreshControl? = nil\n    \n    private let loadRestaurantUseCase: LoadRestaurantUseCase\n    private let loadSelectedFeelingsUseCase: LoadSelectedFeelingsUseCase\n    private let loadRemoteUrlPresetDataUseCase: LoadRemoteUrlPresetDataUseCase\n    \n    init(loadRestaurantUseCase: LoadRestaurantUseCase, loadSelectedFeelingsUseCase: LoadSelectedFeelingsUseCase, loadRemoteUrlPresetDataUseCase: LoadRemoteUrlPresetDataUseCase) {\n        self.loadRestaurantUseCase = loadRestaurantUseCase\n        self.loadSelectedFeelingsUseCase = loadSelectedFeelingsUseCase\n        self.loadRemoteUrlPresetDataUseCase = loadRemoteUrlPresetDataUseCase\n    }\n    \n    var disappearMainScrollLoadingView: (() -> ())!\n    \n    let restaurantCategoryItems = BehaviorSubject<[RestaurantCategory]>(value: [])\n    let seletedFeelingsSequence: BehaviorRelay<[Feeling]> = BehaviorRelay<[Feeling]>(value: [])\n    let remoteUrlPresetDataSequence: BehaviorRelay<[URL]> = BehaviorRelay<[URL]>(value: [])\n    \n    let restaurantDessertKind = [\"카페\", \"디저트\"]\n    let recommendsRestaurnatsDataCount = 10\n    \n    var restaurantCategoryArray: [RestaurantCategory] {\n        get {\n            return [RestaurantCategory](arrayLiteral:\n                RestaurantCategory(title: StringConstants.suggestRestaurantMessage, items: suggestRestaurantsData!),\n                RestaurantCategory(title: StringConstants.recommendsRestaurantMessage, items: recommendsRestaurantsData!),\n                RestaurantCategory(title: StringConstants.suggestDessertMessage, items: suggestDessertRestaurantsData!),\n                RestaurantCategory(title: StringConstants.suggestOtherRestaurantMessage, items: restaurantsData!)\n            )\n        }\n    }\n    \n    var restaurantsData: Restaurant!\n    \n    var suggestRestaurantsData: Restaurant! {\n        get {\n            var items: [RestaurantItem]! = []\n            \n            seletedFeelingsSequence.bind(onNext: { (seletedFeelings) in\n                seletedFeelings.forEach { feeling in\n                    self.restaurantsData.data?.forEach({ restaurant in\n                        let restaurantFeelingTags = restaurant.feeling_tags ?? []\n                        if restaurantFeelingTags.contains(feeling.feelName) {\n                            items.append(restaurant)\n                        }\n                    })\n                }\n            }).disposed(by: disposeBag)\n            \n            return Restaurant(data: items.uniqued())\n        }\n    }\n    \n    var recommendsRestaurantsData: Restaurant! {\n        get {\n            var items: [RestaurantItem]! = []\n            var needRecommend: Bool = true\n            \n            self.restaurantsData.data?.forEach({ restaurant in\n                if needRecommend == false {\n                    return\n                }\n                \n                guard restaurant.custom != nil else {\n                    return\n                }\n                \n                restaurant.custom!.forEach({ value in\n                    if value == \"NoRecommend\" {\n                        needRecommend = false\n                        return\n                    }\n                })\n            })\n            \n            if needRecommend == true {\n                \n                let dateFormatter = DateFormatter()\n                dateFormatter.dateFormat = \"yyyyMMdd\"\n                \n                let todaySeed = Int(dateFormatter.string(from: Date()))!\n                var seedGenerator = RandomNumberGeneratorWithSeed(seed: todaySeed)\n                \n                for _ in 0...recommendsRestaurnatsDataCount {\n                    items.append(restaurantsData.data!.randomElement(using: &seedGenerator)!)\n                }\n                \n            }\n                    \n            return Restaurant(data: items)\n        }\n    }\n    \n    var suggestDessertRestaurantsData: Restaurant! {\n        get {\n            var items: [RestaurantItem]! = []\n            \n            self.restaurantsData.data?.forEach({ restaurnt in\n                restaurantDessertKind.forEach({ dessertKind in\n                    guard restaurnt.kind != nil else {\n                        return\n                    }\n\n                    if restaurnt.kind!.contains(dessertKind) {\n                        items.append(restaurnt)\n                    }\n                })\n            })\n            \n            return Restaurant(data: items.uniqued())\n        }\n    }\n\n    var selectedFeelings: [Feeling] = []\n    var remoteUrlPresetData: [URL] = []\n\n    // MARK: - Public func\n    \n    func loadRestaurants(remoteJsonUrl: URL? = nil, needRefresh: Bool = false) {\n        restaurantsData = loadRestaurantUseCase.call(\n            remoteJsonUrl: remoteJsonUrl,\n            needRefresh: needRefresh,\n            downloadCompletion: disposeRestaurantRemoteLoadingViews,\n            refreshedCompletion: {\n                self.loadRestaurants()\n                self.fetchRestaurantCategoryItems()\n            }\n        )\n    }\n    \n    func disposeRestaurantRemoteLoadingViews() {\n        mainScrollViewEndRefresh()\n        disappearMainScrollLoadingView()\n    }\n    \n    func mainScrollViewEndRefresh() {\n        DispatchQueue.main.async { [self] in\n            guard mainScrollViewRefreshControl != nil else {\n                return\n            }\n            mainScrollViewRefreshControl!.endRefreshing()\n            mainScrollViewRefreshControl = nil\n        }\n    }\n    \n    func fetchRestaurantCategoryItems() {\n        print(\"Fetch Restaurant Caregory Items\")\n        restaurantCategoryItems.onNext(restaurantCategoryArray)\n    }\n    \n    func loadFeelings() {\n        selectedFeelings = loadSelectedFeelingsUseCase.call()\n    }\n    \n    func fetchSelectedFeelings() {\n        self.seletedFeelingsSequence.accept(selectedFeelings)\n    }\n    \n    func loadRemoteUrlPresetData() {\n        remoteUrlPresetData = loadRemoteUrlPresetDataUseCase.call()\n    }\n    \n    func addRemoteUrlPresetData(url: URL = URL(string: StringConstants.setRemoteUrlTextFieldPlaceholder)!) {\n        remoteUrlPresetData.append(url)\n        self.saveRemoteUrlPresetData()\n        self.fetchRemoteUrlPresetData()\n    }\n    \n    func editRemoteUrlPresetData(index: Int, url: URL) {\n        remoteUrlPresetData[index] = url\n        self.saveRemoteUrlPresetData()\n        self.fetchRemoteUrlPresetData()\n    }\n    \n    func deleteRemoteUrlPresetData(index: Int) {\n        remoteUrlPresetData.remove(at: index)\n        self.saveRemoteUrlPresetData()\n        self.fetchRemoteUrlPresetData()\n    }\n    \n    func removeAllRemoteUrlPresetData() {\n        remoteUrlPresetData = []\n        self.saveRemoteUrlPresetData()\n        self.fetchRemoteUrlPresetData()\n    }\n    \n    func saveRemoteUrlPresetData() {\n        loadRemoteUrlPresetDataUseCase.save(remoteUrlPresetData: self.remoteUrlPresetData)\n    }\n    \n    func fetchRemoteUrlPresetData() {\n        self.remoteUrlPresetDataSequence.accept(remoteUrlPresetData)\n    }\n    \n    func getRestaurantCategoryArrayCount() -> Int {\n//        return restaurantCategoryArray.count\n        return 4\n    }\n}",
  "ast_symbols": [
    {
      "symbolName": "disposeRestaurantRemoteLoadingViews()",
      "symbolKind": "method"
    }
  ],
  "target_identifier": "disposeRestaurantRemoteLoadingViews"
}