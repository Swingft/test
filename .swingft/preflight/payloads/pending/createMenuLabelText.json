{
  "swift_code": "//\n//  DetailViewController.swift\n//  StealPlateSwift\n//\n//  Created by 스틸리언 on 2022/10/24.\n//\n\nimport UIKit\nimport SnapKit\nimport RxSwift\nimport RxCocoa\nimport CenteredCollectionView\nimport MapKit\n\nclass DetailViewController: BaseViewController {\n    let viewModel: DetailViewModel = DependencyInjector.detailViewModel()\n    var tapGestureRecognizerShowRestaurantLocationDetailView: UITapGestureRecognizer = UITapGestureRecognizer()\n    \n    // MARK: - View\n    lazy var mainScrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.showsVerticalScrollIndicator = false\n        scrollView.showsHorizontalScrollIndicator = false\n        scrollView.isScrollEnabled = true\n        \n        return scrollView\n    }()\n    \n    lazy var restaurantImageCollectionViewLayout: CenteredCollectionViewFlowLayout = {\n        let layout = CenteredCollectionViewFlowLayout()\n        let cellWidth = ((Int(UIScreen.main.bounds.width) - 32) / NumberConstants.restaurantImageCollectionViewCellCount) - 8\n        \n        layout.minimumLineSpacing = 20\n        layout.itemSize = CGSize(width: cellWidth, height: 200)\n        \n        return layout\n    }()\n    \n    lazy var restaurantImageCollectionView: UICollectionView = {\n        let collectionView = UICollectionView(centeredCollectionViewFlowLayout: restaurantImageCollectionViewLayout)\n        collectionView.register(DetailImageCollectionViewCell.self, forCellWithReuseIdentifier: DetailImageCollectionViewCell.reuseIdentifier)\n        collectionView.showsVerticalScrollIndicator = false\n        collectionView.showsHorizontalScrollIndicator = false\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .clear\n        \n        return collectionView\n    }()\n    \n    lazy var restaurantImageUpScaleView: UIView = {\n        let view = UIView()\n        \n        view.backgroundColor = .black\n        view.alpha = 0.8\n        \n        return view\n    }()\n    \n    lazy var restaurantImageUpScaleViewDismissButton: UIButton = {\n        let button = UIButton()\n        \n        button.setImage(#imageLiteral(resourceName: \"xmark_circle\"), for: .normal)\n        button.imageView?.contentMode = .scaleAspectFill\n        button.tintColor = .white\n        \n        button.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(disappearRestaurantImageUpScaleView)))\n        \n        return button\n    }()\n    \n    lazy var restaurantImageUpScaleCollectionViewLayout: CenteredCollectionViewFlowLayout = {\n        let layout = CenteredCollectionViewFlowLayout()\n        \n//        layout.minimumLineSpacing = 20\n        layout.itemSize = CGSize(\n            width: NumberConstants.deviceWidth,\n            height: NumberConstants.deviceHeight)\n        layout.scrollDirection = .horizontal\n        \n        return layout\n    }()\n    \n    lazy var restaurantImageUpScaleCollectionView: UICollectionView = {\n        let collectionView = UICollectionView(centeredCollectionViewFlowLayout: restaurantImageUpScaleCollectionViewLayout)\n        \n        collectionView.register(DetailImageUpScaleCollectionViewCell.self, forCellWithReuseIdentifier: DetailImageUpScaleCollectionViewCell.reuseIdentifier)\n        \n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.showsVerticalScrollIndicator = false\n        collectionView.showsHorizontalScrollIndicator = true\n        collectionView.backgroundColor = .clear\n        \n        return collectionView\n    }()\n    \n    lazy var restaurantNameLabel: UILabel = {\n        let label = UILabel()\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.restaurantNameLabel))\n        label.textColor = .white\n        label.text = \"식당 이름\"\n        \n        return label\n    }()\n    \n    lazy var inBusinessTagView: UIView = {\n        let view = UIView()\n        view.setRounded(5)\n        view.backgroundColor = .orange\n        \n        return view\n    }()\n    \n    lazy var inBusinessTagLabel: UILabel = {\n        let label = UILabel()\n        label.font = .systemFont(ofSize: 12)\n        label.textColor = .white\n        label.text = \"영업 여부\"\n        label.textAlignment = .center\n        \n        return label\n    }()\n    \n    lazy var starImageView: UIImageView = {\n        let image = #imageLiteral(resourceName: \"star\")\n        let imageView = UIImageView(image: image)\n        \n        return imageView\n    }()\n    \n    lazy var starLabel: UILabel = {\n        let label = UILabel()\n        label.text = \"0.0\"\n        label.textColor = .white\n        \n        return label\n    }()\n    \n    lazy var callNumberImageView: UIImageView = {\n        let image = #imageLiteral(resourceName: \"phone\")\n        let imageView = UIImageView(image: image)\n        \n        return imageView\n    }()\n    \n    lazy var callNumberLabel: UILabel = {\n        let label = UILabel()\n        label.textColor = .white\n        label.text = \"12-345-6789\"\n        \n        return label\n    }()\n    \n    lazy var topLeftBoxView: UIView = {\n        let view = UIView()\n        view.setBorder()\n        \n        return view\n    }()\n    \n    lazy var topLeftBoxLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.textColor = .white\n        label.text = \"분류\\n기타 뭐시기\"\n        label.textAlignment = .center\n        \n        return label\n    }()\n    \n    lazy var topRightBoxView: UIView = {\n        let view = UIView()\n        view.setBorder()\n        \n        return view\n    }()\n    \n    lazy var topRightBoxLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.textColor = .white\n        label.text = \"가격대\\n가격-가격\"\n        label.textAlignment = .center\n        \n        return label\n    }()\n    \n    lazy var bottomLeftBoxView: UIView = {\n        let view = UIView()\n        view.setBorder()\n        \n        return view\n    }()\n    \n    lazy var bottomLeftBoxLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.textColor = .white\n        label.text = \"영업 시간\\n월-금: 00:00 - 00:00 토-일: 00:00 - 00:00\"\n        label.textAlignment = .center\n        \n        return label\n    }()\n    \n    lazy var bottomRightBoxView: UIView = {\n        let view = UIView()\n        view.setBorder()\n        \n        return view\n    }()\n    \n    lazy var bottomRightBoxLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.textColor = .white\n        label.text = \"휴일\\n요일\"\n        label.textAlignment = .center\n        \n        return label\n    }()\n    \n    lazy var menuDividerView: UIView = {\n        let view = UIView()\n        view.backgroundColor = .white\n        \n        return view\n    }()\n    \n    lazy var menuLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.textColor = .white\n        label.text = \"\\n메뉴1: 00,000원\\n메뉴2: 00,000원\\n\"\n        label.setLineSpacing()\n        \n        return label\n    }()\n    \n    lazy var restaurantLocationView: MKMapView = {\n        let mapView = MKMapView()\n        mapView.showsUserLocation = true\n        mapView.setUserTrackingMode(.follow, animated: true)\n        tapGestureRecognizerShowRestaurantLocationDetailView = UITapGestureRecognizer(target: self, action: #selector(showRestaurantLocationDetailViewController))\n        mapView.addGestureRecognizer(tapGestureRecognizerShowRestaurantLocationDetailView)\n        \n//        var mapTitle = \"식당 이름\"\n//        var coordinate: CLLocationCoordinate2D?\n//        \n//        let mark = MKMapMarker(title: mapTitle, coordinate: coordinate)\n//        mapView.addAnnotation(mark)\n        \n        return mapView\n    }()\n    \n    lazy var etcLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.textColor = .white\n        label.text = \"기타 정보\"\n        label.setLineSpacing()\n        \n        return label\n    }()\n    \n    // MARK: - Override\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.navigationController?.navigationBar.isHidden = false\n        \n        let barAppearance: UINavigationBarAppearance = {\n            let appearance = UINavigationBarAppearance()\n\n            appearance.backgroundColor = .black\n            appearance.backgroundImage = UIImage()\n            appearance.shadowImage = UIImage()\n\n            return appearance\n        }()\n\n        self.navigationController?.navigationBar.standardAppearance = barAppearance\n        self.navigationController?.navigationBar.scrollEdgeAppearance = barAppearance\n    }\n    \n    override var preferredStatusBarStyle: UIStatusBarStyle {\n        .lightContent\n    }\n    \n    override func setupVC() {\n        super.setupVC()\n        \n        view.backgroundColor = .black\n//        view.addSubview(mainScrollView)\n        \n        setupAntiCaptureView()\n        antiCaptureView.backgroundColor = .black\n        antiCaptureView.addSubview(mainScrollView)\n        \n        inBusinessTagView.addSubview(inBusinessTagLabel)\n        inBusinessTagLabel.snp.makeConstraints { make in\n            make.top.bottom.equalToSuperview()\n            make.leading.equalToSuperview().offset(4)\n            make.trailing.equalToSuperview().offset(-4)\n        }\n        \n        topLeftBoxView.addSubview(topLeftBoxLabel)\n        topLeftBoxLabel.snp.makeConstraints { make in\n            make.top.bottom.equalToSuperview()\n            make.leading.equalToSuperview().offset(8)\n            make.trailing.equalToSuperview().offset(-8)\n        }\n        \n        topRightBoxView.addSubview(topRightBoxLabel)\n        topRightBoxLabel.snp.makeConstraints { make in\n            make.top.bottom.equalToSuperview()\n            make.leading.equalToSuperview().offset(8)\n            make.trailing.equalToSuperview().offset(-8)\n        }\n        \n        bottomLeftBoxView.addSubview(bottomLeftBoxLabel)\n        bottomLeftBoxLabel.snp.makeConstraints { make in\n            make.top.bottom.equalToSuperview()\n            make.leading.equalToSuperview().offset(8)\n            make.trailing.equalToSuperview().offset(-8)\n        }\n        \n        bottomRightBoxView.addSubview(bottomRightBoxLabel)\n        bottomRightBoxLabel.snp.makeConstraints { make in\n            make.top.bottom.equalToSuperview()\n            make.leading.equalToSuperview().offset(8)\n            make.trailing.equalToSuperview().offset(-8)\n        }\n        \n        mainScrollView.addSubview(restaurantImageCollectionView)\n        mainScrollView.addSubview(restaurantNameLabel)\n        mainScrollView.addSubview(inBusinessTagView)\n        mainScrollView.addSubview(starImageView)\n        mainScrollView.addSubview(starLabel)\n        mainScrollView.addSubview(callNumberImageView)\n        mainScrollView.addSubview(callNumberLabel)\n        mainScrollView.addSubview(topLeftBoxView)\n        mainScrollView.addSubview(topRightBoxView)\n        mainScrollView.addSubview(bottomLeftBoxView)\n        mainScrollView.addSubview(bottomRightBoxView)\n        mainScrollView.addSubview(menuDividerView)\n        mainScrollView.addSubview(menuLabel)\n        mainScrollView.addSubview(restaurantLocationView)\n        mainScrollView.addSubview(etcLabel)\n        \n        restaurantImageCollectionView.snp.makeConstraints { make in\n            make.top.leading.trailing.equalToSuperview()\n            make.width.equalTo(UIScreen.main.bounds.width)\n            make.height.equalTo(200)\n        }\n        \n        restaurantNameLabel.snp.makeConstraints { make in\n            make.top.equalTo(restaurantImageCollectionView.snp.bottom).offset(NumberConstants.layoutMarginLarge)\n            make.leading.equalToSuperview().offset(16)\n        }\n        \n        inBusinessTagView.snp.makeConstraints { make in\n            make.centerY.equalTo(restaurantNameLabel.snp.centerY)\n            make.leading.equalTo(restaurantNameLabel.snp.trailing).offset(8)\n            make.height.equalTo(20)\n        }\n        \n        starImageView.snp.makeConstraints { make in\n            make.top.equalTo(restaurantNameLabel.snp.bottom).offset(8)\n            make.leading.equalToSuperview().offset(16)\n            make.width.height.equalTo(16)\n        }\n        \n        starLabel.snp.makeConstraints { make in\n            make.centerY.equalTo(starImageView.snp.centerY)\n            make.leading.equalTo(starImageView.snp.trailing).offset(8)\n            make.trailing.equalToSuperview().offset(-16)\n        }\n        \n        callNumberImageView.snp.makeConstraints { make in\n            make.top.equalTo(starLabel.snp.bottom).offset(8)\n            make.leading.equalToSuperview().offset(16)\n            make.width.height.equalTo(16)\n        }\n        \n        callNumberLabel.snp.makeConstraints { make in\n            make.centerY.equalTo(callNumberImageView.snp.centerY)\n            make.leading.equalTo(callNumberImageView.snp.trailing).offset(8)\n            make.trailing.equalToSuperview().offset(-16)\n        }\n        \n        topLeftBoxView.snp.makeConstraints { make in\n            make.top.equalTo(callNumberLabel.snp.bottom).offset(16)\n            make.leading.equalToSuperview().offset(32)\n            make.width.equalTo((UIScreen.main.bounds.width - (32 * 3)) / 2)\n            make.height.equalTo((UIScreen.main.bounds.width - (32 * 3)) / 2)\n        }\n        \n        topRightBoxView.snp.makeConstraints { make in\n            make.top.equalTo(callNumberLabel.snp.bottom).offset(16)\n            make.leading.equalTo(topLeftBoxView.snp.trailing).offset(32)\n            make.width.equalTo(topLeftBoxView.snp.width)\n            make.height.equalTo(topLeftBoxView.snp.width)\n        }\n        \n        bottomLeftBoxView.snp.makeConstraints { make in\n            make.top.equalTo(topLeftBoxView.snp.bottom).offset(32)\n            make.leading.equalToSuperview().offset(32)\n            make.width.equalTo(topLeftBoxView.snp.width)\n            make.height.equalTo(topLeftBoxView.snp.width)\n        }\n        \n        bottomRightBoxView.snp.makeConstraints { make in\n            make.top.equalTo(topRightBoxView.snp.bottom).offset(32)\n            make.leading.equalTo(bottomLeftBoxView.snp.trailing).offset(32)\n            make.width.equalTo(topLeftBoxView.snp.width)\n            make.height.equalTo(topLeftBoxView.snp.width)\n        }\n        \n        menuLabel.snp.makeConstraints { make in\n            make.top.equalTo(bottomRightBoxView.snp.bottom).offset(16)\n            make.trailing.equalToSuperview().offset(-16)\n            make.leading.equalTo(menuDividerView.snp.trailing).offset(16)\n        }\n        \n        menuDividerView.snp.makeConstraints { make in\n            make.top.equalTo(bottomLeftBoxView.snp.bottom).offset(16)\n            make.leading.equalToSuperview().offset(16)\n            make.width.equalTo(1)\n            make.height.equalTo(menuLabel.snp.height)\n        }\n        \n        restaurantLocationView.snp.makeConstraints { make in\n            make.top.equalTo(menuLabel.snp.bottom).offset(16)\n            make.leading.equalToSuperview().offset(16)\n            make.trailing.equalToSuperview().offset(-16)\n            make.height.equalTo(300)\n        }\n        \n        etcLabel.snp.makeConstraints { make in\n            make.top.equalTo(restaurantLocationView.snp.bottom).offset(16)\n            make.leading.equalToSuperview().offset(16)\n            make.trailing.equalToSuperview().offset(-16)\n            make.bottom.equalToSuperview().offset(-16)\n        }\n        \n        mainScrollView.snp.makeConstraints { make in\n            make.top.equalToSuperview()\n            make.leading.trailing.bottom.equalToSuperview()\n        }\n    }\n    \n    override func setupVM() {\n        super.setupVM()\n    }\n    \n    override func setupBind() {\n        super.setupBind()\n        \n        viewModel.restaurantImageUrlsSequence.bind(to: restaurantImageCollectionView.rx.items(cellIdentifier: DetailImageCollectionViewCell.reuseIdentifier, cellType: DetailImageCollectionViewCell.self)) { (row, item, cell) in\n            \n            cell.imageView.kf.setImage(\n                with: URL(string:\n                            item.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? \"\"),\n                placeholder: ImageConstants.placeholder\n            )\n            \n            if UIDevice.current.userInterfaceIdiom == .pad, row == 1 {\n                DispatchQueue.main.async {\n                    self.restaurantImageCollectionView.scrollToItem(at: IndexPath(item: 1, section: 0), at: .left, animated: false)\n                }\n            }\n            \n        }.disposed(by: self.disposeBag)\n        \n        viewModel.restaurantImageUrlsSequence.bind(to: restaurantImageUpScaleCollectionView.rx.items(cellIdentifier: DetailImageUpScaleCollectionViewCell.reuseIdentifier, cellType: DetailImageUpScaleCollectionViewCell.self)) { (row, item, cell) in\n            \n            cell.imageView.kf.setImage(\n                with: URL(string:\n                            item.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? \"\"),\n                placeholder: ImageConstants.placeholder\n            )\n            \n            cell.dismissButton = self.restaurantImageUpScaleViewDismissButton\n            \n//            if UIDevice.current.userInterfaceIdiom == .pad, row == 1 {\n//                DispatchQueue.main.async {\n//                    self.restaurantImageCollectionView.scrollToItem(at: IndexPath(item: 1, section: 0), at: .left, animated: false)\n//                }\n//            }\n            \n        }.disposed(by: self.disposeBag)\n        \n        restaurantImageCollectionView.rx.itemAndIndexSelected(String.self)\n            .subscribe(onNext: { (item, index) in\n                \n                DispatchQueue.main.async {\n                    self.showRestaurantImageUpScaleView(indexPath: index)\n                }\n                \n            }).disposed(by: self.disposeBag)\n   \n        viewModel.restaurantSequence\n            .filter{ $0 != nil }\n            .subscribe {\n                \n                guard let data = $0.element else {\n                    return\n                }\n                \n                self.restaurantNameLabel.text = data?.restaurant_name ?? StringConstants.safeContent\n                self.starLabel.text = data?.star ?? StringConstants.safeContent\n                self.viewModel.restaurantImageUrlsSequence.accept(data?.image_urls ?? [])\n                self.restaurantLocationView.setPlaceMark(address: data?.address ?? \"\", placemarkTitle: data?.restaurant_name ?? StringConstants.safeContent)\n                self.topLeftBoxLabel.text = self.createBoxLabelText(title: \"분류\", content: data?.kind)\n                self.callNumberLabel.text = data?.call ?? StringConstants.safeContent\n                self.topRightBoxLabel.text = self.createBoxLabelText(title: \"가격대\", content: data?.cost_range)\n                self.bottomLeftBoxLabel.text = self.createBoxLabelText(title: \"영업 시간\", content: data?.business_hours)\n                //  TODO: ADD inBusinessTagLabel Text\n//                self.inBusinessTagLabel.text\n                self.menuLabel.text = self.createMenuLabelText(content: data?.menu)\n                self.bottomRightBoxLabel.text = self.createBoxLabelText(title: \"휴일\", content: data?.holiday)\n                self.etcLabel.text = self.createEtcLabelText(data: data)\n                \n                self.restaurantImageCollectionView.reloadData()\n                self.restaurantImageCollectionView.reloadSections(IndexSet(integer: 0))\n                \n                self.restaurantImageUpScaleCollectionView.reloadData()\n                self.restaurantImageUpScaleCollectionView.reloadSections(IndexSet(integer: 0))\n                \n            }\n            .disposed(by: self.disposeBag)\n    \n    }\n    \n    // MARK: - Private func\n    private func createBoxLabelText(title: String, content: String?) -> String {\n        let safeContent = content ?? StringConstants.safeContent\n        \n        return title + \"\\n\" + safeContent\n    }\n    \n    private func createMenuLabelText(content: String?) -> String {\n        let safeContent = content ?? StringConstants.safeContent\n        \n        return safeContent.replacingOccurrences(of: \", \", with: \"\\n\")\n    }\n    \n    private func createEtcLabelText(data: RestaurantItem?) -> String {\n        guard data != nil else {\n            return StringConstants.safeContent\n        }\n        \n        var safeContent: [String] = []\n        \n        if data!.last_order != nil {\n            safeContent.append(\"Last Order: \" + (data!.last_order ?? StringConstants.safeContent))\n        }\n        \n        if data!.rest_hours != nil {\n            safeContent.append(\"Break Time: \" + (data!.rest_hours ?? StringConstants.safeContent))\n        }\n        \n        if data!.parking != nil {\n            safeContent.append( \"주차 공간: \" + (data!.parking ?? StringConstants.safeContent))\n        }\n        \n        return safeContent.joined(separator: \"\\n\")\n    }\n    \n    private func showRestaurantImageUpScaleView(indexPath: IndexPath) {\n//        view.addSubview(restaurantImageUpScaleView)\n//        view.addSubview(restaurantImageUpScaleCollectionView)\n//        view.addSubview(restaurantImageUpScaleViewDismissButton)\n        antiCaptureView.addSubview(restaurantImageUpScaleView)\n        antiCaptureView.addSubview(restaurantImageUpScaleCollectionView)\n        antiCaptureView.addSubview(restaurantImageUpScaleViewDismissButton)\n        \n        restaurantImageUpScaleView.snp.makeConstraints { make in\n            make.top.leading.trailing.bottom.equalToSuperview()\n        }\n        \n        restaurantImageUpScaleCollectionView.snp.makeConstraints { make in\n            make.top.leading.trailing.bottom.equalToSuperview()\n        }\n        \n        restaurantImageUpScaleViewDismissButton.snp.makeConstraints { make in\n            make.centerX.equalToSuperview()\n            make.bottom.equalToSuperview().offset(-144)\n            make.width.height.equalTo(32)\n        }\n        \n        restaurantImageUpScaleCollectionView\n            .scrollToItem(at: indexPath, at: .centeredHorizontally, animated: false)\n    }\n    \n    @objc\n    private func disappearRestaurantImageUpScaleView(sender: UITapGestureRecognizer) {\n        restaurantImageUpScaleCollectionView.removeFromSuperview()\n        restaurantImageUpScaleViewDismissButton.removeFromSuperview()\n        restaurantImageUpScaleView.removeFromSuperview()\n    }\n    \n    @objc\n    private func showRestaurantLocationDetailViewController(sender: UITapGestureRecognizer) {\n        let restaurantLocationDetailVC = RestaurantLocationDetailViewController()\n        restaurantLocationDetailVC.viewModel = self.viewModel\n        restaurantLocationDetailVC.mapView.region = restaurantLocationView.region\n        \n        let restaurantLocationDetailVCBarButtonItem: UIBarButtonItem = {\n            let buttonItem = UIBarButtonItem()\n            buttonItem.tintColor = .white\n\n            return buttonItem\n        }()\n        \n        self.navigationController?.pushViewController(restaurantLocationDetailVC, animated: true)\n        self.navigationItem.backBarButtonItem = restaurantLocationDetailVCBarButtonItem\n    }\n}\n\n// MARK: - Extension",
  "ast_symbols": [
    {
      "symbolName": "createMenuLabelText(content: String?)",
      "symbolKind": "method"
    }
  ],
  "target_identifier": "createMenuLabelText"
}