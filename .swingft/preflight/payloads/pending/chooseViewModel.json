{
  "swift_code": "//\n//  DependencyInjector.swift\n//  StealPlateSwift\n//\n//  Created by 스틸리언 on 2022/08/12.\n//\n\nimport Foundation\n\nclass DependencyInjector {\n    // MARK: - ViewModel\n    static func chooseViewModel() -> ChooseViewModel {\n        return ChooseViewModel(loadFeelingUseCase: loadFeelingUseCase(), loadSelectedFeelingsUseCase: loadSelectedFeelingsUseCase(), feelingRepository: feelingRepository())\n    }\n    \n    static func detailViewModel() -> DetailViewModel {\n        return DetailViewModel(loadSelectedRestaurantUseCase: loadSelectedRestaurantUseCase())\n    }\n\n    static func mainViewModel() -> MainViewModel {\n        return MainViewModel(\n            loadRestaurantUseCase: loadRestaurantUseCase(),\n            loadSelectedFeelingsUseCase: loadSelectedFeelingsUseCase(),\n            loadRemoteUrlPresetDataUseCase: loadRemoteUrlPresetDataUseCase())\n    }\n    \n    // MARK: - UseCase\n    static func loadFeelingUseCase() -> LoadFeelingUseCase {\n        return LoadFeelingUseCase(feelingRepository: feelingRepository())\n    }\n    \n    static func loadSelectedRestaurantUseCase() -> LoadSelectedRestaurantUseCase {\n        return LoadSelectedRestaurantUseCase(restaurantRepository: restaurantRepository())\n    }\n    \n    static func loadSelectedFeelingsUseCase() -> LoadSelectedFeelingsUseCase {\n        return LoadSelectedFeelingsUseCase(feelingRepository: feelingRepository())\n    }\n\n    static func loadRestaurantUseCase() -> LoadRestaurantUseCase {\n        return LoadRestaurantUseCase(restaurantRepository: restaurantRepository())\n    }\n    \n    static func loadRemoteUrlPresetDataUseCase() -> LoadRemoteUrlPresetDataUseCase {\n        return LoadRemoteUrlPresetDataUseCase(remoteUrlPresetRepository: remoteUrlPresetRepository())\n    }\n    \n    // MARK: - Repository\n    fileprivate static var _feelingRepository = FeelingRepositoryImpl(localDataSource: feelingLocalDataSource(), remoteDataSource: feelingRemoteDataSource())\n    static func feelingRepository() -> FeelingRepository {\n        return _feelingRepository\n    }\n    \n    fileprivate static var _restaurantRepository = RestaurantRepositoryImpl(localDataSource: restaurantLocalDataSource(), remoteDataSource: restaurantRemoteDataSource())\n    static func restaurantRepository() -> RestaurantRepository {\n        return _restaurantRepository\n    }\n    \n    fileprivate static var _remoteUrlPresetRepository = RemoteUrlPresetRepositoryImpl(localDataSource: remoteUrlPresetLocalDataSource())\n    static func remoteUrlPresetRepository() -> RemoteUrlPresetRepository {\n        return _remoteUrlPresetRepository\n    }\n    \n    // MARK: - DataSource\n    fileprivate static var _feelingLocalDataSource: FeelingLocalDataSource? = FeelingLocalDataSource()\n    static func feelingLocalDataSource() -> FeelingLocalDataSource {\n        if _feelingLocalDataSource == nil {\n            _feelingLocalDataSource = FeelingLocalDataSource()\n        }\n        \n        return _feelingLocalDataSource!\n    }\n    \n    fileprivate static var _feelingRemoteDataSource: FeelingRemoteDataSource? = FeelingRemoteDataSource()\n    static func feelingRemoteDataSource() -> FeelingRemoteDataSource {\n        if _feelingRemoteDataSource == nil {\n            _feelingRemoteDataSource = FeelingRemoteDataSource()\n        }\n        \n        return _feelingRemoteDataSource!\n    }\n    \n    fileprivate static var _restaurantLocalDataSource: RestaurantLocalDataSource? = RestaurantLocalDataSource()\n    static func restaurantLocalDataSource() -> RestaurantLocalDataSource {\n        if _restaurantLocalDataSource == nil {\n            _restaurantLocalDataSource = RestaurantLocalDataSource()\n        }\n        \n        return _restaurantLocalDataSource!\n    }\n    \n    fileprivate static var _restaurantRemoteDataSource: RestaurantRemoteDataSource? = RestaurantRemoteDataSource()\n    static func restaurantRemoteDataSource() -> RestaurantRemoteDataSource {\n        if _restaurantRemoteDataSource == nil {\n            _restaurantRemoteDataSource = RestaurantRemoteDataSource()\n        }\n        \n        return _restaurantRemoteDataSource!\n    }\n    \n    fileprivate static var _remoteUrlPresetLocalDataSource: RemoteUrlPresetLocalDataSource? = RemoteUrlPresetLocalDataSource()\n    static func remoteUrlPresetLocalDataSource() -> RemoteUrlPresetLocalDataSource {\n        if _remoteUrlPresetLocalDataSource == nil {\n            _remoteUrlPresetLocalDataSource = RemoteUrlPresetLocalDataSource()\n        }\n        \n        return _remoteUrlPresetLocalDataSource!\n    }\n}",
  "ast_symbols": [
    {
      "symbolName": "chooseViewModel()",
      "symbolKind": "method"
    }
  ],
  "target_identifier": "chooseViewModel"
}