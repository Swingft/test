{
  "swift_code": "//\n//  STVPNBlockManager.swift\n//  StealPlateSwift\n//\n//  Created by 심재빈 on 6/25/24.\n//\n\nimport UIKit\nimport Foundation\nimport CoreLocation\nimport STVPNBlock\n\nclass STVPNBlockManager {\n    private let sceneDelegate: SceneDelegate\n    \n    private let locationManager = CLLocationManager()\n    private let locationAuthorizationFailureAlertTitle: String = \"Authorization Denied\"\n    \n    private var vpnBlock: STVPNBlock? = nil\n    \n    init(sceneDelegate: SceneDelegate) {\n        self.sceneDelegate = sceneDelegate\n        \n        // 위치 권한 요청\n//        locationManager.requestAlwaysAuthorization()\n        locationManager.requestWhenInUseAuthorization()\n    }\n    \n    private func setupVPNBlock() {\n        vpnBlock = STVPNBlockBuilder.shared\n            .setDetectType(STVPNBlockDetectType.ALL.rawValue)\n            .setDetectIntervalType(.INFINITE)\n            .setDetectInterval(60)\n            .setCountryList([\"JP\", \"CN\"])\n            .setUseBlackList(true)\n            .setStopDetectWhenUnauthorized(false)\n            .setOnLocationAuthorizationFailure { status in\n                var message: String?\n\n                switch status.authorizationStatus {\n                case .notDetermined:\n                    message = \"위치 권한이 결정되지 않았습니다.\"\n                case .restricted:\n                    message = \"위치 권한이 제한되었습니다.\"\n                case .denied:\n                    message = \"위치 권한이 거부되었습니다.\"\n                case .authorizedAlways, .authorizedWhenInUse:\n                    break\n                @unknown default:\n                    break\n                }\n\n                if message == nil {\n                    switch status.accuracyAuthorization {\n                    case .reducedAccuracy:\n                        message = \"정확한 위치가 비활성화 되어있습니다.\"\n                    case .fullAccuracy:\n                        break\n                    @unknown default:\n                        break\n                    }\n                }\n\n                if let message = message {\n                    DispatchQueue.main.async {\n                        self.sceneDelegate.showAlert(title: self.locationAuthorizationFailureAlertTitle, message: message, alertOkButtonAction: {self.openAppSettings()})\n                    }\n                }\n            }\n//            .setAuthUrl(StringConstants.radarUrl)\n            .build()\n    }\n    \n    public func run() {\n        setupVPNBlock()\n        \n//        vpnBlock?.run { result in\n//            DispatchQueue.main.async {\n//                self.sceneDelegate.showToast(message: self.getDetectToastMessage(result))\n//            }\n//        }\n    }\n    \n    private func getDetectToastMessage(_ result: Int) -> String {\n        guard let vpnBlock = vpnBlock else { return \"\" }\n        \n        var message: String = \"\\n\"\n  \n        if vpnBlock.isDetectTypeInclude(result, detectType: .VPN) {\n            message += \"VPN Detected\" + \"\\n\"\n        }\n        if vpnBlock.isDetectTypeInclude(result, detectType: .PROXY) {\n            message += \"Proxy Detected\" + \"\\n\"\n        }\n        if vpnBlock.isDetectTypeInclude(result, detectType: .FAKE_GPS) {\n            message += \"Fake GPS Detected\" + \"\\n\"\n        }\n        if vpnBlock.isDetectTypeInclude(result, detectType: .COUNTRY) {\n            message += \"Country Detected\" + \"\\n\"\n        }\n        \n        return message\n    }\n    \n    private func openAppSettings() {\n        if let appSettings = URL(string: UIApplication.openSettingsURLString) {\n            DispatchQueue.main.async {\n                if UIApplication.shared.canOpenURL(appSettings) {\n                    UIApplication.shared.open(appSettings, options: [:], completionHandler: nil)\n                }\n            }\n        }\n    }\n}",
  "ast_symbols": [
    {
      "symbolName": "setupVPNBlock()",
      "symbolKind": "method"
    }
  ],
  "target_identifier": "setupVPNBlock"
}