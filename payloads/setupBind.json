{
  "swift_code": "//\n//  RestaurantTableViewCell.swift\n//  StealPlateSwift\n//\n//  Created by 심재빈 on 2022/09/20.\n//\n\nimport Foundation\nimport UIKit\nimport SnapKit\nimport RxSwift\nimport RxCocoa\nimport RxDataSources\nimport Kingfisher\n\n// TODO: ADD: Horizontal Collection View\nclass RestaurantTableViewCell: UITableViewCell {\n    static var reuseIdentifier: String {\n        get {\n            return \"RestaurantTableViewCell\"\n        }\n    }\n    \n    var disposeBag: DisposeBag = DisposeBag()\n    \n    var onSelectRestaurant: ((_ item: RestaurantItem) -> Void)?\n    \n    var restaurantItemsData: [RestaurantItem] = [] {\n        didSet {\n            restaurantItems.onNext(restaurantItemsData)\n        }\n    }\n    var restaurantItems = BehaviorSubject<[RestaurantItem]>(value: [])\n    \n    lazy var titleLabel: UILabel = {\n        let label = UILabel()\n    \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.restaurantTableViewTitleLabelSize))\n        label.textColor = .white\n        \n        return label\n    }()\n\n    lazy var collectionViewLayout: UICollectionViewFlowLayout = {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: NumberConstants.restaurantCollectionViewCellSize, height: NumberConstants.restaurantCollectionViewCellSize)\n        layout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)\n        layout.scrollDirection = .horizontal\n        \n        return layout\n    }()\n    \n    lazy var collectionView: UICollectionView = {\n        let collectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: collectionViewLayout)\n        \n        collectionView.register(RestaurantCollectionViewCell.self, forCellWithReuseIdentifier: RestaurantCollectionViewCell.reuseIdentifier)\n        \n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .clear\n        \n        return collectionView\n    }()\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        \n        setupViews()\n        setupBind()\n        \n    }\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        setupViews()\n        setupBind()\n        \n    }\n    \n    private func setupViews() {\n        self.backgroundColor = .clear\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(collectionView)\n        \n        titleLabel.snp.makeConstraints { make in\n            make.top.equalToSuperview()\n            make.leading.equalToSuperview()\n            make.trailing.equalToSuperview()\n        }\n        \n        collectionView.snp.makeConstraints { make in\n            make.top.equalTo(titleLabel.snp.bottom).offset(NumberConstants.layoutMarginMidium)\n            make.bottom.equalToSuperview().offset(-NumberConstants.layoutMarginExtra)\n            make.leading.equalToSuperview()\n            make.trailing.equalToSuperview()\n            make.height.equalTo(NumberConstants.restaurantCollectionViewCellSize)\n        }\n\n    }\n    \n    private func setupBind() {\n        \n        collectionView.register(RestaurantCollectionViewCell.self, forCellWithReuseIdentifier: RestaurantCollectionViewCell.reuseIdentifier)\n\n        restaurantItems.bind(to: collectionView.rx.items(cellIdentifier: RestaurantCollectionViewCell.reuseIdentifier, cellType: RestaurantCollectionViewCell.self)) { (row, item, cell) in\n            \n            cell.restaurantNameLabel.text = item.restaurant_name\n            cell.restaurantMainImageView.kf.setImage(\n                with: URL(string:\n                            item.image_urls?.first?.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? \"\"),\n                placeholder: ImageConstants.placeholder\n            )\n\n        }.disposed(by: self.disposeBag)\n        \n        collectionView.rx.itemAndIndexSelected(RestaurantItem.self)\n            .subscribe(onNext: { (item, index) in\n                \n                self.onSelectRestaurant?(item)\n                \n            }).disposed(by: self.disposeBag)\n        \n    }\n}",
  "ast_symbols": [
    {
      "symbolName": "setupBind()",
      "symbolKind": "method"
    }
  ],
  "target_identifier": "setupBind()"
}