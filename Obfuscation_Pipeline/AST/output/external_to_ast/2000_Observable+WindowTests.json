[
  {
    "A_name" : "ObservableWindowTest",
    "B_kind" : "class",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [
      "RxTest"
    ],
    "F_location" : "Observable+WindowTests.swift - Line: 13, Column: 1",
    "G_members" : [

    ]
  },
  {
    "A_name" : "ObservableWindowTest",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 16, Column: 1",
    "G_members" : [
      {
        "A_name" : "testWindowWithTimeOrCount_Basic",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 17, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 18, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 20, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 33, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testWindowWithTimeOrCount_Error",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 62, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 63, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 65, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .error(600, testError)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 78, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                    }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testWindowWithTimeOrCount_Disposed",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 107, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 108, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 110, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(105, 0),\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 124, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 370) { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "windowWithTimeOrCount_Default",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 150, Column: 5",
        "G_members" : [
          {
            "A_name" : "backgroundScheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 151, Column: 9",
            "H_initialValue" : "SerialDispatchQueueScheduler(qos: .default)"
          },
          {
            "A_name" : "result",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+WindowTests.swift - Line: 153, Column: 9",
            "H_initialValue" : "try! Observable.range(start: 1, count: 10, scheduler: backgroundScheduler)\n            .window(timeSpan: .seconds(1000), count: 3, scheduler: backgroundScheduler)\n            .enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                    }\n            }\n            .merge()\n            .skip(4)\n            .toBlocking()\n            .first()"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testWindowWithTimeOrCount_Basic",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 17, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 18, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 20, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 33, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 18, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 20, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 33, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
  },
  {
    "A_name" : "window",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 34, Column: 13",
    "H_initialValue" : "xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)"
  },
  {
    "A_name" : "mappedWithIndex",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 35, Column: 13",
    "H_initialValue" : "window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }"
  },
  {
    "A_name" : "result",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 40, Column: 13",
    "H_initialValue" : "mappedWithIndex.merge()"
  },
  {
    "A_name" : "testWindowWithTimeOrCount_Error",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 62, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 63, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 65, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .error(600, testError)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 78, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                    }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 63, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 65, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .error(600, testError)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 78, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                    }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
  },
  {
    "A_name" : "window",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 79, Column: 13",
    "H_initialValue" : "xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)"
  },
  {
    "A_name" : "mappedWithIndex",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 80, Column: 13",
    "H_initialValue" : "window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                    }\n            }"
  },
  {
    "A_name" : "result",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 85, Column: 13",
    "H_initialValue" : "mappedWithIndex.merge()"
  },
  {
    "A_name" : "testWindowWithTimeOrCount_Disposed",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 107, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 108, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 110, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(105, 0),\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 124, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 370) { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 108, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 110, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(105, 0),\n            .next(205, 1),\n            .next(210, 2),\n            .next(240, 3),\n            .next(280, 4),\n            .next(320, 5),\n            .next(350, 6),\n            .next(370, 7),\n            .next(420, 8),\n            .next(470, 9),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 124, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 370) { () -> Observable<String> in\n            let window: Observable<Observable<Int>> = xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)\n            let mappedWithIndex = window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }\n            let result = mappedWithIndex.merge()\n            return result\n        }"
  },
  {
    "A_name" : "window",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 125, Column: 13",
    "H_initialValue" : "xs.window(timeSpan: .seconds(70), count: 3, scheduler: scheduler)"
  },
  {
    "A_name" : "mappedWithIndex",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 126, Column: 13",
    "H_initialValue" : "window.enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                }\n            }"
  },
  {
    "A_name" : "result",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 131, Column: 13",
    "H_initialValue" : "mappedWithIndex.merge()"
  },
  {
    "A_name" : "windowWithTimeOrCount_Default",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 150, Column: 5",
    "G_members" : [
      {
        "A_name" : "backgroundScheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 151, Column: 9",
        "H_initialValue" : "SerialDispatchQueueScheduler(qos: .default)"
      },
      {
        "A_name" : "result",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 153, Column: 9",
        "H_initialValue" : "try! Observable.range(start: 1, count: 10, scheduler: backgroundScheduler)\n            .window(timeSpan: .seconds(1000), count: 3, scheduler: backgroundScheduler)\n            .enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                    }\n            }\n            .merge()\n            .skip(4)\n            .toBlocking()\n            .first()"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "backgroundScheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 151, Column: 9",
    "H_initialValue" : "SerialDispatchQueueScheduler(qos: .default)"
  },
  {
    "A_name" : "result",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 153, Column: 9",
    "H_initialValue" : "try! Observable.range(start: 1, count: 10, scheduler: backgroundScheduler)\n            .window(timeSpan: .seconds(1000), count: 3, scheduler: backgroundScheduler)\n            .enumerated().map { (i: Int, o: Observable<Int>) -> Observable<String> in\n                return o.map { (e: Int) -> String in\n                    return \"\\(i) \\(e)\"\n                    }\n            }\n            .merge()\n            .skip(4)\n            .toBlocking()\n            .first()"
  },
  {
    "A_name" : "testWindowReleasesResourcesOnComplete",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 169, Column: 9",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 170, Column: 13",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 170, Column: 13",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "testWindowReleasesResourcesOnError",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 175, Column: 9",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+WindowTests.swift - Line: 176, Column: 13",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+WindowTests.swift - Line: 176, Column: 13",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  }
]