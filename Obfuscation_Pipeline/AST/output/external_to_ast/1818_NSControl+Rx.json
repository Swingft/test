[
  {
    "A_name" : "rx_value_key",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 14, Column: 1",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "rx_control_events_key",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 15, Column: 1",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "Reactive",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 17, Column: 1",
    "G_members" : [
      {
        "A_name" : "controlEvent",
        "B_kind" : "variable",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "NSControl+Rx.swift - Line: 20, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "controlProperty",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "NSControl+Rx.swift - Line: 49, Column: 5",
        "G_members" : [
          {
            "A_name" : "source",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "NSControl+Rx.swift - Line: 55, Column: 9",
            "H_initialValue" : "self.base.rx.lazyInstanceObservable(&rx_value_key) { () -> Observable<()> in\n                return Observable.create { [weak weakControl = self.base] (observer: AnyObserver<()>) in\n                    guard let control = weakControl else {\n                        observer.on(.completed)\n                        return Disposables.create()\n                    }\n\n                    observer.on(.next(()))\n\n                    let observer = ControlTarget(control: control) { _ in\n                        if weakControl != nil {\n                            observer.on(.next(()))\n                        }\n                    }\n\n                    return observer\n                }\n                .take(until: self.deallocated)\n                .share(replay: 1, scope: .whileConnected)\n            }\n            .flatMap { [weak base] _ -> Observable<T> in\n                guard let control = base else { return Observable.empty() }\n                return Observable.just(getter(control))\n            }"
          },
          {
            "A_name" : "bindingObserver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "NSControl+Rx.swift - Line: 80, Column: 9",
            "H_initialValue" : "Binder(self.base, binding: setter)"
          }
        ],
        "I_parameterType" : [
          "@escaping (Base) -> T",
          "@escaping (Base, T) -> Void"
        ],
        "I_parameters" : [
          "getter",
          "setter"
        ],
        "J_returnType" : "-> ControlProperty<T>"
      }
    ]
  },
  {
    "A_name" : "controlEvent",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 20, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "source",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 23, Column: 9",
    "H_initialValue" : "self.lazyInstanceObservable(&rx_control_events_key) { () -> Observable<Void> in\n            Observable.create { [weak control = self.base] observer in\n                MainScheduler.ensureRunningOnMainThread()\n\n                guard let control = control else {\n                    observer.on(.completed)\n                    return Disposables.create()\n                }\n\n                let observer = ControlTarget(control: control) { _ in\n                    observer.on(.next(()))\n                }\n                \n                return observer\n            }\n            .take(until: self.deallocated)\n\t\t\t.share()\n        }"
  },
  {
    "A_name" : "observer",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 32, Column: 17",
    "H_initialValue" : "ControlTarget(control: control) { _ in\n                    observer.on(.next(()))\n                }"
  },
  {
    "A_name" : "controlProperty",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 49, Column: 5",
    "G_members" : [
      {
        "A_name" : "source",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "NSControl+Rx.swift - Line: 55, Column: 9",
        "H_initialValue" : "self.base.rx.lazyInstanceObservable(&rx_value_key) { () -> Observable<()> in\n                return Observable.create { [weak weakControl = self.base] (observer: AnyObserver<()>) in\n                    guard let control = weakControl else {\n                        observer.on(.completed)\n                        return Disposables.create()\n                    }\n\n                    observer.on(.next(()))\n\n                    let observer = ControlTarget(control: control) { _ in\n                        if weakControl != nil {\n                            observer.on(.next(()))\n                        }\n                    }\n\n                    return observer\n                }\n                .take(until: self.deallocated)\n                .share(replay: 1, scope: .whileConnected)\n            }\n            .flatMap { [weak base] _ -> Observable<T> in\n                guard let control = base else { return Observable.empty() }\n                return Observable.just(getter(control))\n            }"
      },
      {
        "A_name" : "bindingObserver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "NSControl+Rx.swift - Line: 80, Column: 9",
        "H_initialValue" : "Binder(self.base, binding: setter)"
      }
    ],
    "I_parameterType" : [
      "@escaping (Base) -> T",
      "@escaping (Base, T) -> Void"
    ],
    "I_parameters" : [
      "getter",
      "setter"
    ],
    "J_returnType" : "-> ControlProperty<T>"
  },
  {
    "A_name" : "source",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 55, Column: 9",
    "H_initialValue" : "self.base.rx.lazyInstanceObservable(&rx_value_key) { () -> Observable<()> in\n                return Observable.create { [weak weakControl = self.base] (observer: AnyObserver<()>) in\n                    guard let control = weakControl else {\n                        observer.on(.completed)\n                        return Disposables.create()\n                    }\n\n                    observer.on(.next(()))\n\n                    let observer = ControlTarget(control: control) { _ in\n                        if weakControl != nil {\n                            observer.on(.next(()))\n                        }\n                    }\n\n                    return observer\n                }\n                .take(until: self.deallocated)\n                .share(replay: 1, scope: .whileConnected)\n            }\n            .flatMap { [weak base] _ -> Observable<T> in\n                guard let control = base else { return Observable.empty() }\n                return Observable.just(getter(control))\n            }"
  },
  {
    "A_name" : "observer",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 64, Column: 21",
    "H_initialValue" : "ControlTarget(control: control) { _ in\n                        if weakControl != nil {\n                            observer.on(.next(()))\n                        }\n                    }"
  },
  {
    "A_name" : "bindingObserver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "NSControl+Rx.swift - Line: 80, Column: 9",
    "H_initialValue" : "Binder(self.base, binding: setter)"
  }
]