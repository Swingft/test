[
  {
    "A_name" : "ObservableConvertibleType",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "ObservableConvertibleType+Driver.swift - Line: 11, Column: 1",
    "G_members" : [
      {
        "A_name" : "asDriver",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "ObservableConvertibleType+Driver.swift - Line: 18, Column: 5",
        "G_members" : [
          {
            "A_name" : "source",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "ObservableConvertibleType+Driver.swift - Line: 19, Column: 9",
            "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catchAndReturn(onErrorJustReturn)"
          }
        ],
        "I_parameterType" : [
          "Element"
        ],
        "I_parameters" : [
          "onErrorJustReturn"
        ],
        "J_returnType" : "-> Driver<Element>"
      },
      {
        "A_name" : "asDriver",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "ObservableConvertibleType+Driver.swift - Line: 32, Column: 5",
        "G_members" : [
          {
            "A_name" : "source",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "ObservableConvertibleType+Driver.swift - Line: 33, Column: 9",
            "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catch { _ in\n                onErrorDriveWith.asObservable()\n            }"
          }
        ],
        "I_parameterType" : [
          "Driver<Element>"
        ],
        "I_parameters" : [
          "onErrorDriveWith"
        ],
        "J_returnType" : "-> Driver<Element>"
      },
      {
        "A_name" : "asDriver",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "ObservableConvertibleType+Driver.swift - Line: 48, Column: 5",
        "G_members" : [
          {
            "A_name" : "source",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "ObservableConvertibleType+Driver.swift - Line: 49, Column: 9",
            "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catch { error in\n                onErrorRecover(error).asObservable()\n            }"
          }
        ],
        "I_parameterType" : [
          "@escaping (_ error: Swift.Error) -> Driver<Element>"
        ],
        "I_parameters" : [
          "onErrorRecover"
        ],
        "J_returnType" : "-> Driver<Element>"
      }
    ]
  },
  {
    "A_name" : "asDriver",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "ObservableConvertibleType+Driver.swift - Line: 18, Column: 5",
    "G_members" : [
      {
        "A_name" : "source",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "ObservableConvertibleType+Driver.swift - Line: 19, Column: 9",
        "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catchAndReturn(onErrorJustReturn)"
      }
    ],
    "I_parameterType" : [
      "Element"
    ],
    "I_parameters" : [
      "onErrorJustReturn"
    ],
    "J_returnType" : "-> Driver<Element>"
  },
  {
    "A_name" : "source",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "ObservableConvertibleType+Driver.swift - Line: 19, Column: 9",
    "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catchAndReturn(onErrorJustReturn)"
  },
  {
    "A_name" : "asDriver",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "ObservableConvertibleType+Driver.swift - Line: 32, Column: 5",
    "G_members" : [
      {
        "A_name" : "source",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "ObservableConvertibleType+Driver.swift - Line: 33, Column: 9",
        "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catch { _ in\n                onErrorDriveWith.asObservable()\n            }"
      }
    ],
    "I_parameterType" : [
      "Driver<Element>"
    ],
    "I_parameters" : [
      "onErrorDriveWith"
    ],
    "J_returnType" : "-> Driver<Element>"
  },
  {
    "A_name" : "source",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "ObservableConvertibleType+Driver.swift - Line: 33, Column: 9",
    "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catch { _ in\n                onErrorDriveWith.asObservable()\n            }"
  },
  {
    "A_name" : "asDriver",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "ObservableConvertibleType+Driver.swift - Line: 48, Column: 5",
    "G_members" : [
      {
        "A_name" : "source",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "ObservableConvertibleType+Driver.swift - Line: 49, Column: 9",
        "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catch { error in\n                onErrorRecover(error).asObservable()\n            }"
      }
    ],
    "I_parameterType" : [
      "@escaping (_ error: Swift.Error) -> Driver<Element>"
    ],
    "I_parameters" : [
      "onErrorRecover"
    ],
    "J_returnType" : "-> Driver<Element>"
  },
  {
    "A_name" : "source",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "ObservableConvertibleType+Driver.swift - Line: 49, Column: 9",
    "H_initialValue" : "self\n            .asObservable()\n            .observe(on:DriverSharingStrategy.scheduler)\n            .catch { error in\n                onErrorRecover(error).asObservable()\n            }"
  }
]