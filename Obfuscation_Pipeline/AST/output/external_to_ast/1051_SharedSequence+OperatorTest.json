[
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "class",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [
      "SharedSequenceTest"
    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 15, Column: 1",
    "G_members" : [

    ]
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 18, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_deferred",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 19, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 20, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 21, Column: 9",
            "H_initialValue" : "Driver.deferred { hotObservable.asDriver(onErrorJustReturn: -1) }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 23, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_deferred",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 19, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 20, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 21, Column: 9",
        "H_initialValue" : "Driver.deferred { hotObservable.asDriver(onErrorJustReturn: -1) }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 23, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 20, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 21, Column: 9",
    "H_initialValue" : "Driver.deferred { hotObservable.asDriver(onErrorJustReturn: -1) }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 23, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 38, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_map",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 39, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 40, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 41, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Int in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return n + 1\n        }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 46, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_map",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 39, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 40, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 41, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Int in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return n + 1\n        }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 46, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 40, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 41, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Int in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return n + 1\n        }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 46, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 61, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_compactMap",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 62, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 63, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<String>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 64, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: \"-1\").compactMap { (n: String) -> Int? in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Int(n)\n        }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 69, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(\"1\"))\n            hotObservable.on(.next(\"2\"))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_compactMapNil",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 82, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 83, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<String>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 84, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: \"-1\").compactMap { (n: String) -> Int? in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Int(n)\n        }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 89, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(\"1\"))\n            hotObservable.on(.next(\"a\"))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_compactMap",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 62, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 63, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<String>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 64, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: \"-1\").compactMap { (n: String) -> Int? in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Int(n)\n        }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 69, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(\"1\"))\n            hotObservable.on(.next(\"2\"))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 63, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<String>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 64, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: \"-1\").compactMap { (n: String) -> Int? in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Int(n)\n        }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 69, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(\"1\"))\n            hotObservable.on(.next(\"2\"))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_compactMapNil",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 82, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 83, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<String>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 84, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: \"-1\").compactMap { (n: String) -> Int? in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Int(n)\n        }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 89, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(\"1\"))\n            hotObservable.on(.next(\"a\"))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 83, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<String>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 84, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: \"-1\").compactMap { (n: String) -> Int? in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Int(n)\n        }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 89, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(\"1\"))\n            hotObservable.on(.next(\"a\"))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 104, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_filter",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 105, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 106, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 107, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).filter { n in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return n % 2 == 0\n        }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 112, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_filter",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 105, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 106, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 107, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).filter { n in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return n % 2 == 0\n        }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 112, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 106, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 107, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).filter { n in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return n % 2 == 0\n        }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 112, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 128, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_switchLatest",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 129, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 130, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Signal<Int>>()"
          },
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 131, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 132, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 134, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: hotObservable1.asSignal(onErrorJustReturn: -1)).switchLatest()"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 136, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(hotObservable1.asSignal(onErrorJustReturn: -2)))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable.on(.next(hotObservable2.asSignal(onErrorJustReturn: -3)))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            hotObservable1.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_switchLatest",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 129, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 130, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Signal<Int>>()"
      },
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 131, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 132, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 134, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: hotObservable1.asSignal(onErrorJustReturn: -1)).switchLatest()"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 136, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(hotObservable1.asSignal(onErrorJustReturn: -2)))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable.on(.next(hotObservable2.asSignal(onErrorJustReturn: -3)))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            hotObservable1.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 130, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Signal<Int>>()"
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 131, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 132, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 134, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: hotObservable1.asSignal(onErrorJustReturn: -1)).switchLatest()"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 136, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(hotObservable1.asSignal(onErrorJustReturn: -2)))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable.on(.next(hotObservable2.asSignal(onErrorJustReturn: -3)))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            hotObservable1.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 168, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_flatMapLatest",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 169, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 170, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 171, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 172, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "errorHotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 173, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "signals",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 175, Column: 9",
            "H_initialValue" : "[\n            hotObservable1.asSignal(onErrorJustReturn: -2),\n            hotObservable2.asSignal(onErrorJustReturn: -3),\n            errorHotObservable.asSignal(onErrorJustReturn: -4),\n        ]"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 181, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: 2).flatMapLatest { signals[$0] }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 183, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(0))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable.on(.next(1))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            errorHotObservable.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_flatMapLatest",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 169, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 170, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 171, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 172, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "errorHotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 173, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "signals",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 175, Column: 9",
        "H_initialValue" : "[\n            hotObservable1.asSignal(onErrorJustReturn: -2),\n            hotObservable2.asSignal(onErrorJustReturn: -3),\n            errorHotObservable.asSignal(onErrorJustReturn: -4),\n        ]"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 181, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: 2).flatMapLatest { signals[$0] }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 183, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(0))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable.on(.next(1))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            errorHotObservable.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 170, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 171, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 172, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "errorHotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 173, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "signals",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 175, Column: 9",
    "H_initialValue" : "[\n            hotObservable1.asSignal(onErrorJustReturn: -2),\n            hotObservable2.asSignal(onErrorJustReturn: -3),\n            errorHotObservable.asSignal(onErrorJustReturn: -4),\n        ]"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 181, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: 2).flatMapLatest { signals[$0] }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 183, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(0))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable.on(.next(1))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            errorHotObservable.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 214, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_flatMapFirst",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 215, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 216, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 217, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 218, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "errorHotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 219, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "signals",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 221, Column: 9",
            "H_initialValue" : "[\n            hotObservable1.asSignal(onErrorJustReturn: -2),\n            hotObservable2.asSignal(onErrorJustReturn: -3),\n            errorHotObservable.asSignal(onErrorJustReturn: -4),\n        ]"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 227, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: 2).flatMapFirst { signals[$0] }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 229, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(0))\n            hotObservable.on(.next(1))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            errorHotObservable.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_flatMapFirst",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 215, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 216, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 217, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 218, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "errorHotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 219, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "signals",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 221, Column: 9",
        "H_initialValue" : "[\n            hotObservable1.asSignal(onErrorJustReturn: -2),\n            hotObservable2.asSignal(onErrorJustReturn: -3),\n            errorHotObservable.asSignal(onErrorJustReturn: -4),\n        ]"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 227, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: 2).flatMapFirst { signals[$0] }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 229, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(0))\n            hotObservable.on(.next(1))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            errorHotObservable.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 216, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 217, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 218, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "errorHotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 219, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "signals",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 221, Column: 9",
    "H_initialValue" : "[\n            hotObservable1.asSignal(onErrorJustReturn: -2),\n            hotObservable2.asSignal(onErrorJustReturn: -3),\n            errorHotObservable.asSignal(onErrorJustReturn: -4),\n        ]"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 227, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: 2).flatMapFirst { signals[$0] }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 229, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(0))\n            hotObservable.on(.next(1))\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            hotObservable2.on(.next(10))\n            hotObservable2.on(.next(11))\n            hotObservable2.on(.error(testError))\n\n            hotObservable.on(.error(testError))\n\n            errorHotObservable.on(.completed)\n            hotObservable.on(.completed)\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 258, Column: 1",
    "G_members" : [
      {
        "A_name" : "OrderedEvent",
        "B_kind" : "enum",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "E_adoptedClassProtocols" : [
          "Equatable"
        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 259, Column: 5",
        "G_members" : [
          {
            "A_name" : "before",
            "B_kind" : "case",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 260, Column: 14",
            "I_parameterType" : [
              "Event<Int>"
            ],
            "I_parameters" : [
              "_"
            ]
          },
          {
            "A_name" : "subscribe",
            "B_kind" : "case",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 261, Column: 14",
            "I_parameterType" : [
              "Event<Int>"
            ],
            "I_parameters" : [
              "_"
            ]
          },
          {
            "A_name" : "after",
            "B_kind" : "case",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 262, Column: 14",
            "I_parameterType" : [
              "Event<Int>"
            ],
            "I_parameters" : [
              "_"
            ]
          }
        ]
      },
      {
        "A_name" : "testAsDriver_doOn",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 265, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 266, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "events",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 268, Column: 9",
            "H_initialValue" : "[OrderedEvent]()"
          },
          {
            "A_name" : "calledSubscribe",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 270, Column: 9",
            "H_initialValue" : "false"
          },
          {
            "A_name" : "calledSubscribed",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 271, Column: 9",
            "H_initialValue" : "false"
          },
          {
            "A_name" : "calledDispose",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 272, Column: 9",
            "H_initialValue" : "false"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 274, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.subscribe(.next(e)))\n        }, afterNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.after(.next(e)))\n        }, onCompleted: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.subscribe(.completed))\n        }, afterCompleted: {\n            events.append(.after(.completed))\n        }, onSubscribe: {\n            XCTAssertTrue(!DispatchQueue.isMain)\n            calledSubscribe = true\n        }, onSubscribed: {\n            XCTAssertTrue(!DispatchQueue.isMain)\n            calledSubscribed = true\n        }, onDispose: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            calledDispose = true\n        })"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 296, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          },
          {
            "A_name" : "expectedEvents",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 307, Column: 9",
            "H_initialValue" : "[.subscribe(.next(1)), .after(.next(1)), .subscribe(.next(2)), .after(.next(2)), .subscribe(.next(-1)), .after(.next(-1)), .subscribe(.completed), .after(.completed)]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_doOnNext",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 314, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 315, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "events",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 317, Column: 9",
            "H_initialValue" : "[Int]()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 319, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(e)\n        })"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 324, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          },
          {
            "A_name" : "expectedEvents",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 335, Column: 9",
            "H_initialValue" : "[1, 2, -1]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_doAfterNext",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 339, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 340, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "events",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 342, Column: 9",
            "H_initialValue" : "[OrderedEvent]()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 344, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            events.append(.subscribe(.next(e)))\n        }, afterNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.after(.next(e)))\n        })"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 351, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          },
          {
            "A_name" : "expectedEvents",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 362, Column: 9",
            "H_initialValue" : "[.subscribe(.next(1)), .after(.next(1)), .subscribe(.next(2)), .after(.next(2)), .subscribe(.next(-1)), .after(.next(-1))]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_doOnCompleted",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 366, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 367, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "completed",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 369, Column: 9",
            "H_initialValue" : "false"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 370, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onCompleted: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            completed = true\n        })"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 375, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "OrderedEvent",
    "B_kind" : "enum",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [
      "Equatable"
    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 259, Column: 5",
    "G_members" : [
      {
        "A_name" : "before",
        "B_kind" : "case",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 260, Column: 14",
        "I_parameterType" : [
          "Event<Int>"
        ],
        "I_parameters" : [
          "_"
        ]
      },
      {
        "A_name" : "subscribe",
        "B_kind" : "case",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 261, Column: 14",
        "I_parameterType" : [
          "Event<Int>"
        ],
        "I_parameters" : [
          "_"
        ]
      },
      {
        "A_name" : "after",
        "B_kind" : "case",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 262, Column: 14",
        "I_parameterType" : [
          "Event<Int>"
        ],
        "I_parameters" : [
          "_"
        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_doOn",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 265, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 266, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "events",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 268, Column: 9",
        "H_initialValue" : "[OrderedEvent]()"
      },
      {
        "A_name" : "calledSubscribe",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 270, Column: 9",
        "H_initialValue" : "false"
      },
      {
        "A_name" : "calledSubscribed",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 271, Column: 9",
        "H_initialValue" : "false"
      },
      {
        "A_name" : "calledDispose",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 272, Column: 9",
        "H_initialValue" : "false"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 274, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.subscribe(.next(e)))\n        }, afterNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.after(.next(e)))\n        }, onCompleted: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.subscribe(.completed))\n        }, afterCompleted: {\n            events.append(.after(.completed))\n        }, onSubscribe: {\n            XCTAssertTrue(!DispatchQueue.isMain)\n            calledSubscribe = true\n        }, onSubscribed: {\n            XCTAssertTrue(!DispatchQueue.isMain)\n            calledSubscribed = true\n        }, onDispose: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            calledDispose = true\n        })"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 296, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      },
      {
        "A_name" : "expectedEvents",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 307, Column: 9",
        "H_initialValue" : "[.subscribe(.next(1)), .after(.next(1)), .subscribe(.next(2)), .after(.next(2)), .subscribe(.next(-1)), .after(.next(-1)), .subscribe(.completed), .after(.completed)]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 266, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "events",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 268, Column: 9",
    "H_initialValue" : "[OrderedEvent]()"
  },
  {
    "A_name" : "calledSubscribe",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 270, Column: 9",
    "H_initialValue" : "false"
  },
  {
    "A_name" : "calledSubscribed",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 271, Column: 9",
    "H_initialValue" : "false"
  },
  {
    "A_name" : "calledDispose",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 272, Column: 9",
    "H_initialValue" : "false"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 274, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.subscribe(.next(e)))\n        }, afterNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.after(.next(e)))\n        }, onCompleted: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.subscribe(.completed))\n        }, afterCompleted: {\n            events.append(.after(.completed))\n        }, onSubscribe: {\n            XCTAssertTrue(!DispatchQueue.isMain)\n            calledSubscribe = true\n        }, onSubscribed: {\n            XCTAssertTrue(!DispatchQueue.isMain)\n            calledSubscribed = true\n        }, onDispose: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            calledDispose = true\n        })"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 296, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "expectedEvents",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 307, Column: 9",
    "H_initialValue" : "[.subscribe(.next(1)), .after(.next(1)), .subscribe(.next(2)), .after(.next(2)), .subscribe(.next(-1)), .after(.next(-1)), .subscribe(.completed), .after(.completed)]"
  },
  {
    "A_name" : "testAsDriver_doOnNext",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 314, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 315, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "events",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 317, Column: 9",
        "H_initialValue" : "[Int]()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 319, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(e)\n        })"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 324, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      },
      {
        "A_name" : "expectedEvents",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 335, Column: 9",
        "H_initialValue" : "[1, 2, -1]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 315, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "events",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 317, Column: 9",
    "H_initialValue" : "[Int]()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 319, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(e)\n        })"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 324, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "expectedEvents",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 335, Column: 9",
    "H_initialValue" : "[1, 2, -1]"
  },
  {
    "A_name" : "testAsDriver_doAfterNext",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 339, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 340, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "events",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 342, Column: 9",
        "H_initialValue" : "[OrderedEvent]()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 344, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            events.append(.subscribe(.next(e)))\n        }, afterNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.after(.next(e)))\n        })"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 351, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      },
      {
        "A_name" : "expectedEvents",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 362, Column: 9",
        "H_initialValue" : "[.subscribe(.next(1)), .after(.next(1)), .subscribe(.next(2)), .after(.next(2)), .subscribe(.next(-1)), .after(.next(-1))]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 340, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "events",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 342, Column: 9",
    "H_initialValue" : "[OrderedEvent]()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 344, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onNext: { e in\n            events.append(.subscribe(.next(e)))\n        }, afterNext: { e in\n            XCTAssertTrue(DispatchQueue.isMain)\n            events.append(.after(.next(e)))\n        })"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 351, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n            \n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n            \n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "expectedEvents",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 362, Column: 9",
    "H_initialValue" : "[.subscribe(.next(1)), .after(.next(1)), .subscribe(.next(2)), .after(.next(2)), .subscribe(.next(-1)), .after(.next(-1))]"
  },
  {
    "A_name" : "testAsDriver_doOnCompleted",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 366, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 367, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "completed",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 369, Column: 9",
        "H_initialValue" : "false"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 370, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onCompleted: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            completed = true\n        })"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 375, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 367, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "completed",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 369, Column: 9",
    "H_initialValue" : "false"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 370, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).do(onCompleted: {\n            XCTAssertTrue(DispatchQueue.isMain)\n            completed = true\n        })"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 375, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 391, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_distinctUntilChanged1",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 392, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 393, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 395, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged()"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 397, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_distinctUntilChanged2",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 411, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 412, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 414, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 })"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 416, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_distinctUntilChanged3",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 430, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 431, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 433, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 == $1 })"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 435, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_distinctUntilChanged4",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 450, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 451, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 453, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 }) { $0 == $1 }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 455, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_distinctUntilChanged1",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 392, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 393, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 395, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged()"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 397, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 393, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 395, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged()"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 397, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_distinctUntilChanged2",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 411, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 412, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 414, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 })"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 416, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 412, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 414, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 })"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 416, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_distinctUntilChanged3",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 430, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 431, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 433, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 == $1 })"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 435, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 431, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 433, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 == $1 })"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 435, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_distinctUntilChanged4",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 450, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 451, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 453, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 }) { $0 == $1 }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 455, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 451, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 453, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).distinctUntilChanged({ $0 }) { $0 == $1 }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 455, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 472, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_flatMap",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 473, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 474, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 475, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).flatMap { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 480, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_flatMap",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 473, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 474, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 475, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).flatMap { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 480, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 474, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 475, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).flatMap { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 480, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 497, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_mergeSync",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 498, Column: 5",
        "G_members" : [
          {
            "A_name" : "factories",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 499, Column: 9",
            "H_initialValue" : "[\n                { source in Driver.merge(source) },\n                { source in Driver.merge([source]) },\n                { source in Driver.merge(AnyCollection([source])) },\n            ]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_mergeSync",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 498, Column: 5",
    "G_members" : [
      {
        "A_name" : "factories",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 499, Column: 9",
        "H_initialValue" : "[\n                { source in Driver.merge(source) },\n                { source in Driver.merge([source]) },\n                { source in Driver.merge(AnyCollection([source])) },\n            ]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "factories",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 499, Column: 9",
    "H_initialValue" : "[\n                { source in Driver.merge(source) },\n                { source in Driver.merge([source]) },\n                { source in Driver.merge(AnyCollection([source])) },\n            ]"
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 507, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 508, Column: 13",
    "H_initialValue" : "factory(hotObservable.asDriver(onErrorJustReturn: -1))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 510, Column: 13",
    "H_initialValue" : "self.subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n                XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n                hotObservable.on(.next(1))\n                hotObservable.on(.next(2))\n                hotObservable.on(.error(testError))\n\n                XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n            }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 526, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_merge",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 527, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 528, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 529, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }.merge()"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 534, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_merge2",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 547, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 548, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 549, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }.merge(maxConcurrent: 1)"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 554, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_merge",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 527, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 528, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 529, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }.merge()"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 534, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 528, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 529, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }.merge()"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 534, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_merge2",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 547, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 548, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 549, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }.merge(maxConcurrent: 1)"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 554, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 548, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 549, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).map { (n: Int) -> Signal<Int> in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return Signal.just(n + 1)\n        }.merge(maxConcurrent: 1)"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 554, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(xs) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 569, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_debug",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 570, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 571, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 572, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).debug(\"a\", trimOutput: false)"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 574, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_debug",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 570, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 571, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 572, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).debug(\"a\", trimOutput: false)"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 574, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 571, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 572, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).debug(\"a\", trimOutput: false)"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 574, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 588, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_debounce",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 589, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 590, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 591, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).debounce(.seconds(0))"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 593, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_throttle",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 604, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 605, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 606, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).throttle(.milliseconds(500))"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 608, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_throttle2",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 621, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 622, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 623, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).throttle(.milliseconds(500), latest: false)"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 625, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_debounce",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 589, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 590, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 591, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).debounce(.seconds(0))"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 593, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 590, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 591, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).debounce(.seconds(0))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 593, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_throttle",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 604, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 605, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 606, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).throttle(.milliseconds(500))"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 608, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 605, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 606, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).throttle(.milliseconds(500))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 608, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_throttle2",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 621, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 622, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 623, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).throttle(.milliseconds(500), latest: false)"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 625, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 622, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 623, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).throttle(.milliseconds(500), latest: false)"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 625, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 641, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_scan",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 642, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 643, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 644, Column: 9",
            "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).scan(0) { (a: Int, n: Int) -> Int in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return a + n\n        }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 649, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_scan",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 642, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 643, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 644, Column: 9",
        "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).scan(0) { (a: Int, n: Int) -> Int in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return a + n\n        }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 649, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 643, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 644, Column: 9",
    "H_initialValue" : "hotObservable.asDriver(onErrorJustReturn: -1).scan(0) { (a: Int, n: Int) -> Int in\n            XCTAssertTrue(DispatchQueue.isMain)\n            return a + n\n        }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 649, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable.on(.next(1))\n            hotObservable.on(.next(2))\n            hotObservable.on(.error(testError))\n\n            XCTAssertTrue(hotObservable.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 665, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_concat_sequenceType",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 666, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 667, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 668, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 670, Column: 9",
            "H_initialValue" : "Driver.concat(AnySequence([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)]))"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 672, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable2.on(.next(4))\n            hotObservable2.on(.next(5))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_concat",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 692, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 693, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 694, Column: 9",
            "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 696, Column: 9",
            "H_initialValue" : "Driver.concat([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)])"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 698, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable2.on(.next(4))\n            hotObservable2.on(.next(5))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_concat_sequenceType",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 666, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 667, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 668, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 670, Column: 9",
        "H_initialValue" : "Driver.concat(AnySequence([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)]))"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 672, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable2.on(.next(4))\n            hotObservable2.on(.next(5))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 667, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 668, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 670, Column: 9",
    "H_initialValue" : "Driver.concat(AnySequence([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)]))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 672, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable2.on(.next(4))\n            hotObservable2.on(.next(5))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_concat",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 692, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 693, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 694, Column: 9",
        "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 696, Column: 9",
        "H_initialValue" : "Driver.concat([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)])"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 698, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable2.on(.next(4))\n            hotObservable2.on(.next(5))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 693, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 694, Column: 9",
    "H_initialValue" : "MainThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 696, Column: 9",
    "H_initialValue" : "Driver.concat([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)])"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 698, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable2.on(.next(4))\n            hotObservable2.on(.next(5))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 720, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_combineLatest_array",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 721, Column: 5",
        "G_members" : [
          {
            "A_name" : "factories",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 722, Column: 9",
            "H_initialValue" : "[\n                { e0 in\n                    Driver.combineLatest(e0) { a in a.reduce(0, +) }\n                },\n                { e0 in\n                    Driver.combineLatest(e0).map { a in a.reduce(0, +) }\n                },\n            ]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_combineLatest",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 759, Column: 5",
        "G_members" : [
          {
            "A_name" : "factories",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 760, Column: 9",
            "H_initialValue" : "[\n                { e0, e1 in\n                    Driver.combineLatest(e0, e1, resultSelector: +)\n                },\n                { e0, e1 in\n                    Driver.combineLatest(e0, e1).map(+)\n                },\n            ]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_combineLatest_array",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 721, Column: 5",
    "G_members" : [
      {
        "A_name" : "factories",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 722, Column: 9",
        "H_initialValue" : "[\n                { e0 in\n                    Driver.combineLatest(e0) { a in a.reduce(0, +) }\n                },\n                { e0 in\n                    Driver.combineLatest(e0).map { a in a.reduce(0, +) }\n                },\n            ]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "factories",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 722, Column: 9",
    "H_initialValue" : "[\n                { e0 in\n                    Driver.combineLatest(e0) { a in a.reduce(0, +) }\n                },\n                { e0 in\n                    Driver.combineLatest(e0).map { a in a.reduce(0, +) }\n                },\n            ]"
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 733, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 734, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 736, Column: 13",
    "H_initialValue" : "factory([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)])"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 738, Column: 13",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n                XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n                hotObservable1.on(.next(1))\n                hotObservable2.on(.next(4))\n\n                hotObservable1.on(.next(2))\n                hotObservable2.on(.next(5))\n\n                hotObservable1.on(.error(testError))\n                hotObservable2.on(.error(testError))\n\n                XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n            }"
  },
  {
    "A_name" : "testAsDriver_combineLatest",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 759, Column: 5",
    "G_members" : [
      {
        "A_name" : "factories",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 760, Column: 9",
        "H_initialValue" : "[\n                { e0, e1 in\n                    Driver.combineLatest(e0, e1, resultSelector: +)\n                },\n                { e0, e1 in\n                    Driver.combineLatest(e0, e1).map(+)\n                },\n            ]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "factories",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 760, Column: 9",
    "H_initialValue" : "[\n                { e0, e1 in\n                    Driver.combineLatest(e0, e1, resultSelector: +)\n                },\n                { e0, e1 in\n                    Driver.combineLatest(e0, e1).map(+)\n                },\n            ]"
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 770, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 771, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 773, Column: 13",
    "H_initialValue" : "factory(hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 775, Column: 13",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n                XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n                hotObservable1.on(.next(1))\n                hotObservable2.on(.next(4))\n\n                hotObservable1.on(.next(2))\n                hotObservable2.on(.next(5))\n\n                hotObservable1.on(.error(testError))\n                hotObservable2.on(.error(testError))\n\n                XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n            }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 798, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_zip_array",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 799, Column: 5",
        "G_members" : [
          {
            "A_name" : "factories",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 800, Column: 9",
            "H_initialValue" : "[\n                { e0 in\n                    Driver.zip(e0) { a in a.reduce(0, +) }\n                },\n                { e0 in\n                    Driver.zip(e0).map { a in a.reduce(0, +) }\n                },\n            ]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_zip",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 837, Column: 5",
        "G_members" : [
          {
            "A_name" : "factories",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 838, Column: 9",
            "H_initialValue" : "[\n                { e0, e1 in\n                    Driver.zip(e0, e1, resultSelector: +)\n                },\n                { e0, e1 in\n                    Driver.zip(e0, e1).map(+)\n                },\n            ]"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_zip_array",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 799, Column: 5",
    "G_members" : [
      {
        "A_name" : "factories",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 800, Column: 9",
        "H_initialValue" : "[\n                { e0 in\n                    Driver.zip(e0) { a in a.reduce(0, +) }\n                },\n                { e0 in\n                    Driver.zip(e0).map { a in a.reduce(0, +) }\n                },\n            ]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "factories",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 800, Column: 9",
    "H_initialValue" : "[\n                { e0 in\n                    Driver.zip(e0) { a in a.reduce(0, +) }\n                },\n                { e0 in\n                    Driver.zip(e0).map { a in a.reduce(0, +) }\n                },\n            ]"
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 811, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 812, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 814, Column: 13",
    "H_initialValue" : "factory([hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2)])"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 816, Column: 13",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n                XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n                hotObservable1.on(.next(1))\n                hotObservable2.on(.next(4))\n\n                hotObservable1.on(.next(2))\n                hotObservable2.on(.next(5))\n\n                hotObservable1.on(.error(testError))\n                hotObservable2.on(.error(testError))\n\n                XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n            }"
  },
  {
    "A_name" : "testAsDriver_zip",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 837, Column: 5",
    "G_members" : [
      {
        "A_name" : "factories",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 838, Column: 9",
        "H_initialValue" : "[\n                { e0, e1 in\n                    Driver.zip(e0, e1, resultSelector: +)\n                },\n                { e0, e1 in\n                    Driver.zip(e0, e1).map(+)\n                },\n            ]"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "factories",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 838, Column: 9",
    "H_initialValue" : "[\n                { e0, e1 in\n                    Driver.zip(e0, e1, resultSelector: +)\n                },\n                { e0, e1 in\n                    Driver.zip(e0, e1).map(+)\n                },\n            ]"
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 848, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 849, Column: 13",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 851, Column: 13",
    "H_initialValue" : "factory(hotObservable1.asDriver(onErrorJustReturn: -1), hotObservable2.asDriver(onErrorJustReturn: -2))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 853, Column: 13",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n                XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n                hotObservable1.on(.next(1))\n                hotObservable2.on(.next(4))\n\n                hotObservable1.on(.next(2))\n                hotObservable2.on(.next(5))\n\n                hotObservable1.on(.error(testError))\n                hotObservable2.on(.error(testError))\n\n                XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n                XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n            }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 876, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_withLatestFrom",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 877, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 878, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 879, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 881, Column: 9",
            "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).withLatestFrom(hotObservable2.asDriver(onErrorJustReturn: -2)) { f, s in \"\\(f)\\(s)\" }"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 883, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable2.on(.next(4))\n\n            hotObservable1.on(.next(2))\n            hotObservable2.on(.next(5))\n\n            hotObservable1.on(.error(testError))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testAsDriver_withLatestFromDefaultOverload",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 903, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 904, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "hotObservable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 905, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 907, Column: 9",
            "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).withLatestFrom(hotObservable2.asDriver(onErrorJustReturn: -2))"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 909, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable2.on(.next(4))\n\n            hotObservable1.on(.next(2))\n            hotObservable2.on(.next(5))\n\n            hotObservable1.on(.error(testError))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_withLatestFrom",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 877, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 878, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 879, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 881, Column: 9",
        "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).withLatestFrom(hotObservable2.asDriver(onErrorJustReturn: -2)) { f, s in \"\\(f)\\(s)\" }"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 883, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable2.on(.next(4))\n\n            hotObservable1.on(.next(2))\n            hotObservable2.on(.next(5))\n\n            hotObservable1.on(.error(testError))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 878, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 879, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 881, Column: 9",
    "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).withLatestFrom(hotObservable2.asDriver(onErrorJustReturn: -2)) { f, s in \"\\(f)\\(s)\" }"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 883, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable2.on(.next(4))\n\n            hotObservable1.on(.next(2))\n            hotObservable2.on(.next(5))\n\n            hotObservable1.on(.error(testError))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "testAsDriver_withLatestFromDefaultOverload",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 903, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 904, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "hotObservable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 905, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 907, Column: 9",
        "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).withLatestFrom(hotObservable2.asDriver(onErrorJustReturn: -2))"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 909, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable2.on(.next(4))\n\n            hotObservable1.on(.next(2))\n            hotObservable2.on(.next(5))\n\n            hotObservable1.on(.error(testError))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 904, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "hotObservable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 905, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 907, Column: 9",
    "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).withLatestFrom(hotObservable2.asDriver(onErrorJustReturn: -2))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 909, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable2.on(.next(4))\n\n            hotObservable1.on(.next(2))\n            hotObservable2.on(.next(5))\n\n            hotObservable1.on(.error(testError))\n            hotObservable2.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n            XCTAssertTrue(hotObservable2.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 932, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_skip",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 933, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 934, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 936, Column: 9",
            "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).skip(1)"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 938, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_skip",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 933, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 934, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 936, Column: 9",
        "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).skip(1)"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 938, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 934, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 936, Column: 9",
    "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).skip(1)"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 938, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 954, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_startWith",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 955, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 956, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 958, Column: 9",
            "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).startWith(0)"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 960, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_startWith",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 955, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 956, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 958, Column: 9",
        "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).startWith(0)"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 960, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 956, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 958, Column: 9",
    "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).startWith(0)"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 960, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 976, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_delay",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 977, Column: 5",
        "G_members" : [
          {
            "A_name" : "hotObservable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 978, Column: 9",
            "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
          },
          {
            "A_name" : "driver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 980, Column: 9",
            "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).delay(.milliseconds(100))"
          },
          {
            "A_name" : "results",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 982, Column: 9",
            "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_delay",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 977, Column: 5",
    "G_members" : [
      {
        "A_name" : "hotObservable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 978, Column: 9",
        "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
      },
      {
        "A_name" : "driver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 980, Column: 9",
        "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).delay(.milliseconds(100))"
      },
      {
        "A_name" : "results",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 982, Column: 9",
        "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "hotObservable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 978, Column: 9",
    "H_initialValue" : "BackgroundThreadPrimitiveHotObservable<Int>()"
  },
  {
    "A_name" : "driver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 980, Column: 9",
    "H_initialValue" : "hotObservable1.asDriver(onErrorJustReturn: -1).delay(.milliseconds(100))"
  },
  {
    "A_name" : "results",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 982, Column: 9",
    "H_initialValue" : "subscribeTwiceOnBackgroundSchedulerAndOnlyOneSubscription(driver) {\n            XCTAssertTrue(hotObservable1.subscriptions == [SubscribedToHotObservable])\n\n            hotObservable1.on(.next(1))\n            hotObservable1.on(.next(2))\n\n            hotObservable1.on(.error(testError))\n\n            XCTAssertTrue(hotObservable1.subscriptions == [UnsunscribedFromHotObservable])\n        }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 998, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_interval",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 999, Column: 5",
        "G_members" : [
          {
            "A_name" : "testScheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1000, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "firstObserver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1002, Column: 9",
            "H_initialValue" : "testScheduler.createObserver(Int.self)"
          },
          {
            "A_name" : "secondObserver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1003, Column: 9",
            "H_initialValue" : "testScheduler.createObserver(Int.self)"
          },
          {
            "A_name" : "disposable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1005, Column: 9",
            "H_initialValue" : ""
          },
          {
            "A_name" : "disposable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1006, Column: 9",
            "H_initialValue" : ""
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_interval",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 999, Column: 5",
    "G_members" : [
      {
        "A_name" : "testScheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1000, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "firstObserver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1002, Column: 9",
        "H_initialValue" : "testScheduler.createObserver(Int.self)"
      },
      {
        "A_name" : "secondObserver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1003, Column: 9",
        "H_initialValue" : "testScheduler.createObserver(Int.self)"
      },
      {
        "A_name" : "disposable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1005, Column: 9",
        "H_initialValue" : ""
      },
      {
        "A_name" : "disposable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1006, Column: 9",
        "H_initialValue" : ""
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "testScheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1000, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "firstObserver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1002, Column: 9",
    "H_initialValue" : "testScheduler.createObserver(Int.self)"
  },
  {
    "A_name" : "secondObserver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1003, Column: 9",
    "H_initialValue" : "testScheduler.createObserver(Int.self)"
  },
  {
    "A_name" : "disposable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1005, Column: 9",
    "H_initialValue" : ""
  },
  {
    "A_name" : "disposable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1006, Column: 9",
    "H_initialValue" : ""
  },
  {
    "A_name" : "interval",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1009, Column: 13",
    "H_initialValue" : "Driver<Int>.interval(.seconds(100))"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1039, Column: 1",
    "G_members" : [
      {
        "A_name" : "testAsDriver_timer",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1040, Column: 5",
        "G_members" : [
          {
            "A_name" : "testScheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1041, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "firstObserver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1043, Column: 9",
            "H_initialValue" : "testScheduler.createObserver(Int.self)"
          },
          {
            "A_name" : "secondObserver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1044, Column: 9",
            "H_initialValue" : "testScheduler.createObserver(Int.self)"
          },
          {
            "A_name" : "disposable1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1046, Column: 9",
            "H_initialValue" : ""
          },
          {
            "A_name" : "disposable2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1047, Column: 9",
            "H_initialValue" : ""
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testAsDriver_timer",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1040, Column: 5",
    "G_members" : [
      {
        "A_name" : "testScheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1041, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "firstObserver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1043, Column: 9",
        "H_initialValue" : "testScheduler.createObserver(Int.self)"
      },
      {
        "A_name" : "secondObserver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1044, Column: 9",
        "H_initialValue" : "testScheduler.createObserver(Int.self)"
      },
      {
        "A_name" : "disposable1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1046, Column: 9",
        "H_initialValue" : ""
      },
      {
        "A_name" : "disposable2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1047, Column: 9",
        "H_initialValue" : ""
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "testScheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1041, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "firstObserver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1043, Column: 9",
    "H_initialValue" : "testScheduler.createObserver(Int.self)"
  },
  {
    "A_name" : "secondObserver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1044, Column: 9",
    "H_initialValue" : "testScheduler.createObserver(Int.self)"
  },
  {
    "A_name" : "disposable1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1046, Column: 9",
    "H_initialValue" : ""
  },
  {
    "A_name" : "disposable2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1047, Column: 9",
    "H_initialValue" : ""
  },
  {
    "A_name" : "interval",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1050, Column: 13",
    "H_initialValue" : "Driver<Int>.timer(.seconds(100), period: .seconds(105))"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1081, Column: 1",
    "G_members" : [
      {
        "A_name" : "testDriverFromOptional",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1082, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1083, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testDriverFromOptionalWhenNil",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1094, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1095, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testDriverFromOptional",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1082, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1083, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1083, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1086, Column: 13",
    "H_initialValue" : "scheduler.start { Driver.from(optional: 1 as Int?) }"
  },
  {
    "A_name" : "testDriverFromOptionalWhenNil",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1094, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1095, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1095, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1098, Column: 13",
    "H_initialValue" : "scheduler.start { Driver.from(optional: nil as Int?) }"
  },
  {
    "A_name" : "SharedSequenceOperatorTests",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1109, Column: 1",
    "G_members" : [
      {
        "A_name" : "testDriverFromSequence",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1110, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1111, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testDriverFromArray",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1122, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "SharedSequence+OperatorTest.swift - Line: 1123, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testDriverFromSequence",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1110, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1111, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1111, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1114, Column: 13",
    "H_initialValue" : "scheduler.start { Driver.from(AnySequence([10])) }"
  },
  {
    "A_name" : "testDriverFromArray",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1122, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "SharedSequence+OperatorTest.swift - Line: 1123, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1123, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SharedSequence+OperatorTest.swift - Line: 1126, Column: 13",
    "H_initialValue" : "scheduler.start { Driver.from([20]) }"
  }
]