[
  {
    "A_name" : "ObservableCatchTest",
    "B_kind" : "class",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [
      "RxTest"
    ],
    "F_location" : "Observable+CatchTests.swift - Line: 13, Column: 1",
    "G_members" : [

    ]
  },
  {
    "A_name" : "ObservableCatchTest",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 16, Column: 1",
    "G_members" : [
      {
        "A_name" : "testCatch_ErrorSpecific_Caught",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 17, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 18, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "o1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 20, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n        ])"
          },
          {
            "A_name" : "o2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 27, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n        ])"
          },
          {
            "A_name" : "handlerCalled",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 32, Column: 9",
            "H_initialValue" : ""
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 34, Column: 9",
            "H_initialValue" : "scheduler.start {\n            o1.catch { _ in\n                handlerCalled = scheduler.clock\n                return o2.asObservable()\n            }\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatch_HandlerThrows",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 59, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 60, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "o1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 62, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n        ])"
          },
          {
            "A_name" : "handlerCalled",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 69, Column: 9",
            "H_initialValue" : ""
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 71, Column: 9",
            "H_initialValue" : "scheduler.start {\n            o1.catch { _ in\n                handlerCalled = scheduler.clock\n                throw testError1\n            }\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testCatch_ErrorSpecific_Caught",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 17, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 18, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "o1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 20, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n        ])"
      },
      {
        "A_name" : "o2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 27, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n        ])"
      },
      {
        "A_name" : "handlerCalled",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 32, Column: 9",
        "H_initialValue" : ""
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 34, Column: 9",
        "H_initialValue" : "scheduler.start {\n            o1.catch { _ in\n                handlerCalled = scheduler.clock\n                return o2.asObservable()\n            }\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 18, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "o1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 20, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n        ])"
  },
  {
    "A_name" : "o2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 27, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n        ])"
  },
  {
    "A_name" : "handlerCalled",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 32, Column: 9",
    "H_initialValue" : ""
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 34, Column: 9",
    "H_initialValue" : "scheduler.start {\n            o1.catch { _ in\n                handlerCalled = scheduler.clock\n                return o2.asObservable()\n            }\n        }"
  },
  {
    "A_name" : "testCatch_HandlerThrows",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 59, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 60, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "o1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 62, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n        ])"
      },
      {
        "A_name" : "handlerCalled",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 69, Column: 9",
        "H_initialValue" : ""
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 71, Column: 9",
        "H_initialValue" : "scheduler.start {\n            o1.catch { _ in\n                handlerCalled = scheduler.clock\n                throw testError1\n            }\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 60, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "o1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 62, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n        ])"
  },
  {
    "A_name" : "handlerCalled",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 69, Column: 9",
    "H_initialValue" : ""
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 71, Column: 9",
    "H_initialValue" : "scheduler.start {\n            o1.catch { _ in\n                handlerCalled = scheduler.clock\n                throw testError1\n            }\n        }"
  },
  {
    "A_name" : "testCatchReleasesResourcesOnComplete",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 92, Column: 9",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "tesCatch1ReleasesResourcesOnError",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 96, Column: 9",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "tesCatch2ReleasesResourcesOnError",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 100, Column: 9",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "ObservableCatchTest",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 107, Column: 1",
    "G_members" : [
      {
        "A_name" : "testCatchSequenceOf_IEofIO",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 108, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 109, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 111, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 1),\n            .next(20, 2),\n            .next(30, 3),\n            .error(40, testError)\n        ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 118, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 4),\n            .next(20, 5),\n            .error(30, testError)\n        ])"
          },
          {
            "A_name" : "xs3",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 124, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 6),\n            .next(20, 7),\n            .next(30, 8),\n            .next(40, 9),\n            .completed(50)\n        ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 132, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1.asObservable(), xs2.asObservable(), xs3.asObservable()])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatchAnySequence_NoErrors",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 162, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 163, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 165, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .completed(230)\n            ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 172, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 177, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatchAnySequence_Never",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 195, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 196, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 198, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 202, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 207, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatchAnySequence_Empty",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 222, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 223, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 225, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .completed(230)\n            ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 230, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 235, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatchSequenceOf_Error",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 251, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 252, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 254, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 261, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 266, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatchSequenceOf_ErrorNever",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 286, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 287, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 289, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 296, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 300, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatchSequenceOf_ErrorError",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 318, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 319, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 321, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 328, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .error(250, testError)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 333, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testCatchSequenceOf_Multiple",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 352, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 353, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs1",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 355, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .error(215, testError)\n            ])"
          },
          {
            "A_name" : "xs2",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 361, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(220, 3),\n            .error(225, testError)\n            ])"
          },
          {
            "A_name" : "xs3",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 366, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(230, 4),\n            .completed(235)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 371, Column: 9",
            "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1.asObservable(), xs2.asObservable(), xs3.asObservable()])\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testCatchSequenceOf_IEofIO",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 108, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 109, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 111, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 1),\n            .next(20, 2),\n            .next(30, 3),\n            .error(40, testError)\n        ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 118, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 4),\n            .next(20, 5),\n            .error(30, testError)\n        ])"
      },
      {
        "A_name" : "xs3",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 124, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 6),\n            .next(20, 7),\n            .next(30, 8),\n            .next(40, 9),\n            .completed(50)\n        ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 132, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1.asObservable(), xs2.asObservable(), xs3.asObservable()])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 109, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 111, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 1),\n            .next(20, 2),\n            .next(30, 3),\n            .error(40, testError)\n        ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 118, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 4),\n            .next(20, 5),\n            .error(30, testError)\n        ])"
  },
  {
    "A_name" : "xs3",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 124, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(10, 6),\n            .next(20, 7),\n            .next(30, 8),\n            .next(40, 9),\n            .completed(50)\n        ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 132, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1.asObservable(), xs2.asObservable(), xs3.asObservable()])\n        }"
  },
  {
    "A_name" : "testCatchAnySequence_NoErrors",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 162, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 163, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 165, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .completed(230)\n            ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 172, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 177, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 163, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 165, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .completed(230)\n            ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 172, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 177, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
  },
  {
    "A_name" : "testCatchAnySequence_Never",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 195, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 196, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 198, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 202, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 207, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 196, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 198, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 202, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 207, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
  },
  {
    "A_name" : "testCatchAnySequence_Empty",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 222, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 223, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 225, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .completed(230)\n            ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 230, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 235, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 223, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 225, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .completed(230)\n            ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 230, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 235, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
  },
  {
    "A_name" : "testCatchSequenceOf_Error",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 251, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 252, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 254, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 261, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 266, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 252, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 254, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 261, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(240, 4),\n            .completed(250)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 266, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
  },
  {
    "A_name" : "testCatchSequenceOf_ErrorNever",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 286, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 287, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 289, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 296, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 300, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 287, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 289, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 296, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 300, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
  },
  {
    "A_name" : "testCatchSequenceOf_ErrorError",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 318, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 319, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 321, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 328, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .error(250, testError)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 333, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 319, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 321, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .next(220, 3),\n            .error(230, testError)\n            ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 328, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .error(250, testError)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 333, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1, xs2].map { $0.asObservable() })\n        }"
  },
  {
    "A_name" : "testCatchSequenceOf_Multiple",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 352, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 353, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs1",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 355, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .error(215, testError)\n            ])"
      },
      {
        "A_name" : "xs2",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 361, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(220, 3),\n            .error(225, testError)\n            ])"
      },
      {
        "A_name" : "xs3",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 366, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(230, 4),\n            .completed(235)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 371, Column: 9",
        "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1.asObservable(), xs2.asObservable(), xs3.asObservable()])\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 353, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs1",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 355, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(150, 1),\n            .next(210, 2),\n            .error(215, testError)\n            ])"
  },
  {
    "A_name" : "xs2",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 361, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(220, 3),\n            .error(225, testError)\n            ])"
  },
  {
    "A_name" : "xs3",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 366, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(230, 4),\n            .completed(235)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 371, Column: 9",
    "H_initialValue" : "scheduler.start {\n            Observable.catch(sequence: [xs1.asObservable(), xs2.asObservable(), xs3.asObservable()])\n        }"
  },
  {
    "A_name" : "testCatchSequenceReleasesResourcesOnComplete",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 396, Column: 9",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "ObservableCatchTest",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 402, Column: 1",
    "G_members" : [
      {
        "A_name" : "testRetry_Basic",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 403, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 404, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 406, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .completed(250)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 413, Column: 9",
            "H_initialValue" : "scheduler.start {\n            xs.retry()\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testRetry_Infinite",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 429, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 430, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 432, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 438, Column: 9",
            "H_initialValue" : "scheduler.start {\n            xs.retry()\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testRetry_Observable_Error",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 453, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 454, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 456, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .error(250, testError),\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 463, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 1100) {\n            xs.retry()\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testRetryCount_Basic",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 488, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 489, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 491, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 498, Column: 9",
            "H_initialValue" : "scheduler.start {\n            xs.retry(3)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testRetryCount_Dispose",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 522, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 523, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 525, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 532, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 231) {\n            xs.retry(3)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testRetryCount_Infinite",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 550, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 551, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 553, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 560, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 231) {\n            xs.retry(3)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testRetryCount_Completed",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 578, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 579, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 581, Column: 9",
            "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .completed(250)\n            ])"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 588, Column: 9",
            "H_initialValue" : "scheduler.start {\n            xs.retry(3)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testRetry_tailRecursiveOptimizationsTest",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 604, Column: 5",
        "G_members" : [
          {
            "A_name" : "count",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 605, Column: 9",
            "H_initialValue" : "1"
          },
          {
            "A_name" : "sequenceSendingImmediateError",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+CatchTests.swift - Line: 606, Column: 9",
            "H_initialValue" : "Observable.create { observer in\n            observer.on(.next(0))\n            observer.on(.next(1))\n            observer.on(.next(2))\n            if count < 2 {\n                observer.on(.error(testError))\n                count += 1\n            }\n            observer.on(.next(3))\n            observer.on(.next(4))\n            observer.on(.next(5))\n            observer.on(.completed)\n\n            return Disposables.create()\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testRetry_Basic",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 403, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 404, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 406, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .completed(250)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 413, Column: 9",
        "H_initialValue" : "scheduler.start {\n            xs.retry()\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 404, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 406, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .completed(250)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 413, Column: 9",
    "H_initialValue" : "scheduler.start {\n            xs.retry()\n        }"
  },
  {
    "A_name" : "testRetry_Infinite",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 429, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 430, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 432, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 438, Column: 9",
        "H_initialValue" : "scheduler.start {\n            xs.retry()\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 430, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 432, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 438, Column: 9",
    "H_initialValue" : "scheduler.start {\n            xs.retry()\n        }"
  },
  {
    "A_name" : "testRetry_Observable_Error",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 453, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 454, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 456, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .error(250, testError),\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 463, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 1100) {\n            xs.retry()\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 454, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 456, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .error(250, testError),\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 463, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 1100) {\n            xs.retry()\n        }"
  },
  {
    "A_name" : "testRetryCount_Basic",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 488, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 489, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 491, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 498, Column: 9",
        "H_initialValue" : "scheduler.start {\n            xs.retry(3)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 489, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 491, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 498, Column: 9",
    "H_initialValue" : "scheduler.start {\n            xs.retry(3)\n        }"
  },
  {
    "A_name" : "testRetryCount_Dispose",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 522, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 523, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 525, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 532, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 231) {\n            xs.retry(3)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 523, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 525, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 532, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 231) {\n            xs.retry(3)\n        }"
  },
  {
    "A_name" : "testRetryCount_Infinite",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 550, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 551, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 553, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 560, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 231) {\n            xs.retry(3)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 551, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 553, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(5, 1),\n            .next(10, 2),\n            .next(15, 3),\n            .error(20, testError)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 560, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 231) {\n            xs.retry(3)\n        }"
  },
  {
    "A_name" : "testRetryCount_Completed",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 578, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 579, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 581, Column: 9",
        "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .completed(250)\n            ])"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 588, Column: 9",
        "H_initialValue" : "scheduler.start {\n            xs.retry(3)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 579, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 581, Column: 9",
    "H_initialValue" : "scheduler.createColdObservable([\n            .next(100, 1),\n            .next(150, 2),\n            .next(200, 3),\n            .completed(250)\n            ])"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 588, Column: 9",
    "H_initialValue" : "scheduler.start {\n            xs.retry(3)\n        }"
  },
  {
    "A_name" : "testRetry_tailRecursiveOptimizationsTest",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 604, Column: 5",
    "G_members" : [
      {
        "A_name" : "count",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 605, Column: 9",
        "H_initialValue" : "1"
      },
      {
        "A_name" : "sequenceSendingImmediateError",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+CatchTests.swift - Line: 606, Column: 9",
        "H_initialValue" : "Observable.create { observer in\n            observer.on(.next(0))\n            observer.on(.next(1))\n            observer.on(.next(2))\n            if count < 2 {\n                observer.on(.error(testError))\n                count += 1\n            }\n            observer.on(.next(3))\n            observer.on(.next(4))\n            observer.on(.next(5))\n            observer.on(.completed)\n\n            return Disposables.create()\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "count",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 605, Column: 9",
    "H_initialValue" : "1"
  },
  {
    "A_name" : "sequenceSendingImmediateError",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 606, Column: 9",
    "H_initialValue" : "Observable.create { observer in\n            observer.on(.next(0))\n            observer.on(.next(1))\n            observer.on(.next(2))\n            if count < 2 {\n                observer.on(.error(testError))\n                count += 1\n            }\n            observer.on(.next(3))\n            observer.on(.next(4))\n            observer.on(.next(5))\n            observer.on(.completed)\n\n            return Disposables.create()\n        }"
  },
  {
    "A_name" : "testRetryReleasesResourcesOnComplete",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 629, Column: 9",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "testRetryReleasesResourcesOnError",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+CatchTests.swift - Line: 633, Column: 9",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  }
]