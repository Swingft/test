[
  {
    "A_name" : "ScheduleState",
    "B_kind" : "enum",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 9, Column: 1",
    "G_members" : [
      {
        "A_name" : "initial",
        "B_kind" : "case",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 10, Column: 10",
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "added",
        "B_kind" : "case",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 11, Column: 10",
        "I_parameterType" : [
          "CompositeDisposable.DisposeKey"
        ],
        "I_parameters" : [
          "_"
        ]
      },
      {
        "A_name" : "done",
        "B_kind" : "case",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 12, Column: 10",
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "AnyRecursiveScheduler",
    "B_kind" : "class",
    "C_accessLevel" : "final",
    "D_attributes" : [
      "final"
    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 16, Column: 1",
    "G_members" : [
      {
        "A_name" : "lock",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 20, Column: 5",
        "H_initialValue" : "RecursiveLock()"
      },
      {
        "A_name" : "group",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 23, Column: 5",
        "H_initialValue" : "CompositeDisposable()"
      },
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 25, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "action",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 26, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "init",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 28, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [
          "SchedulerType",
          "@escaping Action"
        ],
        "I_parameters" : [
          "scheduler",
          "action"
        ]
      },
      {
        "A_name" : "schedule",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 39, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduleState",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "RecursiveScheduler.swift - Line: 40, Column: 9",
            "H_initialValue" : ".initial"
          },
          {
            "A_name" : "d",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "RecursiveScheduler.swift - Line: 42, Column: 9",
            "H_initialValue" : "self.scheduler.scheduleRelative(state, dueTime: dueTime) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }\n            \n            if let action = action {\n                action(state, self)\n            }\n            \n            return Disposables.create()\n        }"
          }
        ],
        "I_parameterType" : [
          "State",
          "RxTimeInterval"
        ],
        "I_parameters" : [
          "_",
          "dueTime"
        ]
      },
      {
        "A_name" : "schedule",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 90, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduleState",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "RecursiveScheduler.swift - Line: 91, Column: 9",
            "H_initialValue" : ".initial"
          },
          {
            "A_name" : "d",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "RecursiveScheduler.swift - Line: 93, Column: 9",
            "H_initialValue" : "self.scheduler.schedule(state) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n                \n                return self.action\n            }\n           \n            if let action = action {\n                action(state, self)\n            }\n            \n            return Disposables.create()\n        }"
          }
        ],
        "I_parameterType" : [
          "State"
        ],
        "I_parameters" : [
          "_"
        ]
      },
      {
        "A_name" : "dispose",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 138, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "lock",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 20, Column: 5",
    "H_initialValue" : "RecursiveLock()"
  },
  {
    "A_name" : "group",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 23, Column: 5",
    "H_initialValue" : "CompositeDisposable()"
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 25, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "action",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 26, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "init",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 28, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [
      "SchedulerType",
      "@escaping Action"
    ],
    "I_parameters" : [
      "scheduler",
      "action"
    ]
  },
  {
    "A_name" : "schedule",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 39, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduleState",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 40, Column: 9",
        "H_initialValue" : ".initial"
      },
      {
        "A_name" : "d",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 42, Column: 9",
        "H_initialValue" : "self.scheduler.scheduleRelative(state, dueTime: dueTime) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }\n            \n            if let action = action {\n                action(state, self)\n            }\n            \n            return Disposables.create()\n        }"
      }
    ],
    "I_parameterType" : [
      "State",
      "RxTimeInterval"
    ],
    "I_parameters" : [
      "_",
      "dueTime"
    ]
  },
  {
    "A_name" : "scheduleState",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 40, Column: 9",
    "H_initialValue" : ".initial"
  },
  {
    "A_name" : "d",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 42, Column: 9",
    "H_initialValue" : "self.scheduler.scheduleRelative(state, dueTime: dueTime) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }\n            \n            if let action = action {\n                action(state, self)\n            }\n            \n            return Disposables.create()\n        }"
  },
  {
    "A_name" : "action",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 48, Column: 13",
    "H_initialValue" : "self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }"
  },
  {
    "A_name" : "schedule",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 90, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduleState",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 91, Column: 9",
        "H_initialValue" : ".initial"
      },
      {
        "A_name" : "d",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 93, Column: 9",
        "H_initialValue" : "self.scheduler.schedule(state) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n                \n                return self.action\n            }\n           \n            if let action = action {\n                action(state, self)\n            }\n            \n            return Disposables.create()\n        }"
      }
    ],
    "I_parameterType" : [
      "State"
    ],
    "I_parameters" : [
      "_"
    ]
  },
  {
    "A_name" : "scheduleState",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 91, Column: 9",
    "H_initialValue" : ".initial"
  },
  {
    "A_name" : "d",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 93, Column: 9",
    "H_initialValue" : "self.scheduler.schedule(state) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n                \n                return self.action\n            }\n           \n            if let action = action {\n                action(state, self)\n            }\n            \n            return Disposables.create()\n        }"
  },
  {
    "A_name" : "action",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 99, Column: 13",
    "H_initialValue" : "self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n                \n                return self.action\n            }"
  },
  {
    "A_name" : "dispose",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 138, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "RecursiveImmediateScheduler",
    "B_kind" : "class",
    "C_accessLevel" : "final",
    "D_attributes" : [
      "final"
    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 147, Column: 1",
    "G_members" : [
      {
        "A_name" : "lock",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 150, Column: 5",
        "H_initialValue" : "SpinLock()"
      },
      {
        "A_name" : "group",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 151, Column: 5",
        "H_initialValue" : "CompositeDisposable()"
      },
      {
        "A_name" : "action",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 153, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 154, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "init",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 156, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [
          "@escaping Action",
          "ImmediateSchedulerType"
        ],
        "I_parameters" : [
          "action",
          "scheduler"
        ]
      },
      {
        "A_name" : "schedule",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 166, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduleState",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "RecursiveScheduler.swift - Line: 167, Column: 9",
            "H_initialValue" : ".initial"
          },
          {
            "A_name" : "d",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "RecursiveScheduler.swift - Line: 169, Column: 9",
            "H_initialValue" : "self.scheduler.schedule(state) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }\n            \n            if let action = action {\n                action(state, self.schedule)\n            }\n            \n            return Disposables.create()\n        }"
          }
        ],
        "I_parameterType" : [
          "State"
        ],
        "I_parameters" : [
          "_"
        ]
      },
      {
        "A_name" : "dispose",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 214, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "lock",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 150, Column: 5",
    "H_initialValue" : "SpinLock()"
  },
  {
    "A_name" : "group",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 151, Column: 5",
    "H_initialValue" : "CompositeDisposable()"
  },
  {
    "A_name" : "action",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 153, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 154, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "init",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 156, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [
      "@escaping Action",
      "ImmediateSchedulerType"
    ],
    "I_parameters" : [
      "action",
      "scheduler"
    ]
  },
  {
    "A_name" : "schedule",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 166, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduleState",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 167, Column: 9",
        "H_initialValue" : ".initial"
      },
      {
        "A_name" : "d",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "RecursiveScheduler.swift - Line: 169, Column: 9",
        "H_initialValue" : "self.scheduler.schedule(state) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }\n            \n            if let action = action {\n                action(state, self.schedule)\n            }\n            \n            return Disposables.create()\n        }"
      }
    ],
    "I_parameterType" : [
      "State"
    ],
    "I_parameters" : [
      "_"
    ]
  },
  {
    "A_name" : "scheduleState",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 167, Column: 9",
    "H_initialValue" : ".initial"
  },
  {
    "A_name" : "d",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 169, Column: 9",
    "H_initialValue" : "self.scheduler.schedule(state) { state -> Disposable in\n            \/\/ best effort\n            if self.group.isDisposed {\n                return Disposables.create()\n            }\n            \n            let action = self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }\n            \n            if let action = action {\n                action(state, self.schedule)\n            }\n            \n            return Disposables.create()\n        }"
  },
  {
    "A_name" : "action",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 175, Column: 13",
    "H_initialValue" : "self.lock.performLocked { () -> Action? in\n                switch scheduleState {\n                case let .added(removeKey):\n                    self.group.remove(for: removeKey)\n                case .initial:\n                    break\n                case .done:\n                    break\n                }\n\n                scheduleState = .done\n\n                return self.action\n            }"
  },
  {
    "A_name" : "dispose",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "RecursiveScheduler.swift - Line: 214, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  }
]