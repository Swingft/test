[
  {
    "A_name" : "ObservableTakeWhileTest",
    "B_kind" : "class",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [
      "RxTest"
    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 13, Column: 1",
    "G_members" : [

    ]
  },
  {
    "A_name" : "ObservableTakeWhileTest",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 16, Column: 1",
    "G_members" : [
      {
        "A_name" : "testTakeWhile_Exclusive_Complete_Before",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 17, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 18, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 20, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .completed(330),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n        ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 36, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 38, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Exclusive_Complete_After",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 60, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 61, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 63, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 78, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 80, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Exclusive_Error_Before",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 103, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 104, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 106, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .error(270, testError),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 122, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 124, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Exclusive_Error_After",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 144, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 145, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 147, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 162, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 164, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Exclusive_Dispose_Before",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 187, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 188, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 190, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 205, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 207, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Exclusive_Dispose_After",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 227, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 228, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 230, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 245, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 247, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 400) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Exclusive_Zero",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 270, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 271, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 273, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(205, 100),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 289, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 291, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Exclusive_Throw",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 309, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 310, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 312, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 327, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 329, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { num in\n                invoked += 1\n                \n                if invoked == 3 {\n                    throw testError\n                }\n                \n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Complete_Before",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 354, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 355, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 357, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .completed(330),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n        ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 373, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 375, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Complete_After",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 397, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 398, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 400, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 415, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 417, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Error_Before",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 441, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 442, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 444, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .error(270, testError),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 460, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 462, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Error_After",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 482, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 483, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 485, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 500, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 502, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Dispose_Before",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 526, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 527, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 529, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 544, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 546, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Dispose_After",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 566, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 567, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 569, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 584, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 586, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 400) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Zero",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 610, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 611, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 613, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(205, 100),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 629, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 631, Column: 9",
            "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      },
      {
        "A_name" : "testTakeWhile_Inclusive_Throw",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 650, Column: 5",
        "G_members" : [
          {
            "A_name" : "scheduler",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 651, Column: 9",
            "H_initialValue" : "TestScheduler(initialClock: 0)"
          },
          {
            "A_name" : "xs",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 653, Column: 9",
            "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
          },
          {
            "A_name" : "invoked",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 668, Column: 9",
            "H_initialValue" : "0"
          },
          {
            "A_name" : "res",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "Observable+TakeWhileTests.swift - Line: 670, Column: 9",
            "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { num in\n                invoked += 1\n\n                if invoked == 3 {\n                    throw testError\n                }\n\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
          }
        ],
        "I_parameterType" : [

        ],
        "I_parameters" : [

        ]
      }
    ]
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Complete_Before",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 17, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 18, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 20, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .completed(330),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n        ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 36, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 38, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 18, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 20, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .completed(330),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n        ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 36, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 38, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Complete_After",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 60, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 61, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 63, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 78, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 80, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 61, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 63, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 78, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 80, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Error_Before",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 103, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 104, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 106, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .error(270, testError),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 122, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 124, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 104, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 106, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .error(270, testError),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 122, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 124, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Error_After",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 144, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 145, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 147, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 162, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 164, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 145, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 147, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 162, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 164, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Dispose_Before",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 187, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 188, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 190, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 205, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 207, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 188, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 190, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 205, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 207, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Dispose_After",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 227, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 228, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 230, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 245, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 247, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 400) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 228, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 230, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 245, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 247, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 400) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Zero",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 270, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 271, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 273, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(205, 100),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 289, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 291, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 271, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 273, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(205, 100),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 289, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 291, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Exclusive_Throw",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 309, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 310, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 312, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 327, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 329, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { num in\n                invoked += 1\n                \n                if invoked == 3 {\n                    throw testError\n                }\n                \n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 310, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 312, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 327, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 329, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { num in\n                invoked += 1\n                \n                if invoked == 3 {\n                    throw testError\n                }\n                \n                return isPrime(num)\n            }, behavior: .exclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Complete_Before",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 354, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 355, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 357, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .completed(330),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n        ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 373, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 375, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 355, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 357, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .completed(330),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n        ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 373, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 375, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Complete_After",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 397, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 398, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 400, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 415, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 417, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 398, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 400, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 415, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 417, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Error_Before",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 441, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 442, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 444, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .error(270, testError),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 460, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 462, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 442, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 444, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .error(270, testError),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 460, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 462, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Error_After",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 482, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 483, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 485, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 500, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 502, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 483, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 485, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 500, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 502, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Dispose_Before",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 526, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 527, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 529, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 544, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 546, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 527, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 529, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 544, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 546, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Dispose_After",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 566, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 567, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 569, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 584, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 586, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 400) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 567, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 569, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 584, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 586, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 400) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Zero",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 610, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 611, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 613, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(205, 100),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 629, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 631, Column: 9",
        "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 611, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 613, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(205, 100),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .error(600, testError),\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 629, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 631, Column: 9",
    "H_initialValue" : "scheduler.start(disposed: 300) { () -> Observable<Int> in\n            return xs.take(while: { (num: Int) -> Bool in\n                invoked += 1\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhile_Inclusive_Throw",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 650, Column: 5",
    "G_members" : [
      {
        "A_name" : "scheduler",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 651, Column: 9",
        "H_initialValue" : "TestScheduler(initialClock: 0)"
      },
      {
        "A_name" : "xs",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 653, Column: 9",
        "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
      },
      {
        "A_name" : "invoked",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 668, Column: 9",
        "H_initialValue" : "0"
      },
      {
        "A_name" : "res",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "Observable+TakeWhileTests.swift - Line: 670, Column: 9",
        "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { num in\n                invoked += 1\n\n                if invoked == 3 {\n                    throw testError\n                }\n\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
      }
    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "scheduler",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 651, Column: 9",
    "H_initialValue" : "TestScheduler(initialClock: 0)"
  },
  {
    "A_name" : "xs",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 653, Column: 9",
    "H_initialValue" : "scheduler.createHotObservable([\n            .next(90, -1),\n            .next(110, -1),\n            .next(210, 2),\n            .next(260, 5),\n            .next(290, 13),\n            .next(320, 3),\n            .next(350, 7),\n            .next(390, 4),\n            .next(410, 17),\n            .next(450, 8),\n            .next(500, 23),\n            .completed(600)\n            ])"
  },
  {
    "A_name" : "invoked",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 668, Column: 9",
    "H_initialValue" : "0"
  },
  {
    "A_name" : "res",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 670, Column: 9",
    "H_initialValue" : "scheduler.start { () -> Observable<Int> in\n            return xs.take(while: { num in\n                invoked += 1\n\n                if invoked == 3 {\n                    throw testError\n                }\n\n                return isPrime(num)\n            }, behavior: .inclusive)\n        }"
  },
  {
    "A_name" : "testTakeWhileReleasesResourcesOnComplete",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 697, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "testTakeWhile1ReleasesResourcesOnError",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 701, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  },
  {
    "A_name" : "testTakeWhile2ReleasesResourcesOnError",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "Observable+TakeWhileTests.swift - Line: 705, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ]
  }
]