[
  {
    "A_name" : "Reactive",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 14, Column: 1",
    "G_members" : [
      {
        "A_name" : "controlEvent",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "UIControl+Rx.swift - Line: 18, Column: 5",
        "G_members" : [
          {
            "A_name" : "source",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "UIControl+Rx.swift - Line: 19, Column: 9",
            "H_initialValue" : "Observable.create { [weak control = self.base] observer in\n                MainScheduler.ensureRunningOnMainThread()\n\n                guard let control = control else {\n                    observer.on(.completed)\n                    return Disposables.create()\n                }\n\n                let controlTarget = ControlTarget(control: control, controlEvents: controlEvents) { _ in\n                    observer.on(.next(()))\n                }\n\n                return Disposables.create(with: controlTarget.dispose)\n            }\n            .take(until: deallocated)"
          }
        ],
        "I_parameterType" : [
          "UIControl.Event"
        ],
        "I_parameters" : [
          "_"
        ],
        "J_returnType" : "-> ControlEvent<()>"
      },
      {
        "A_name" : "controlProperty",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "UIControl+Rx.swift - Line: 43, Column: 5",
        "G_members" : [
          {
            "A_name" : "source",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "UIControl+Rx.swift - Line: 48, Column: 9",
            "H_initialValue" : "Observable.create { [weak weakControl = base] observer in\n                guard let control = weakControl else {\n                    observer.on(.completed)\n                    return Disposables.create()\n                }\n\n                observer.on(.next(getter(control)))\n\n                let controlTarget = ControlTarget(control: control, controlEvents: editingEvents) { _ in\n                    if let control = weakControl {\n                        observer.on(.next(getter(control)))\n                    }\n                }\n                \n                return Disposables.create(with: controlTarget.dispose)\n            }\n            .take(until: deallocated)"
          },
          {
            "A_name" : "bindingObserver",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "UIControl+Rx.swift - Line: 66, Column: 9",
            "H_initialValue" : "Binder(base, binding: setter)"
          }
        ],
        "I_parameterType" : [
          "UIControl.Event",
          "@escaping (Base) -> T",
          "@escaping (Base, T) -> Void"
        ],
        "I_parameters" : [
          "editingEvents",
          "getter",
          "setter"
        ],
        "J_returnType" : "-> ControlProperty<T>"
      },
      {
        "A_name" : "controlPropertyWithDefaultEvents",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "UIControl+Rx.swift - Line: 73, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [
          "UIControl.Event",
          "@escaping (Base) -> T",
          "@escaping (Base, T) -> Void"
        ],
        "I_parameters" : [
          "editingEvents",
          "getter",
          "setter"
        ],
        "J_returnType" : "-> ControlProperty<T>"
      }
    ]
  },
  {
    "A_name" : "controlEvent",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 18, Column: 5",
    "G_members" : [
      {
        "A_name" : "source",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "UIControl+Rx.swift - Line: 19, Column: 9",
        "H_initialValue" : "Observable.create { [weak control = self.base] observer in\n                MainScheduler.ensureRunningOnMainThread()\n\n                guard let control = control else {\n                    observer.on(.completed)\n                    return Disposables.create()\n                }\n\n                let controlTarget = ControlTarget(control: control, controlEvents: controlEvents) { _ in\n                    observer.on(.next(()))\n                }\n\n                return Disposables.create(with: controlTarget.dispose)\n            }\n            .take(until: deallocated)"
      }
    ],
    "I_parameterType" : [
      "UIControl.Event"
    ],
    "I_parameters" : [
      "_"
    ],
    "J_returnType" : "-> ControlEvent<()>"
  },
  {
    "A_name" : "source",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 19, Column: 9",
    "H_initialValue" : "Observable.create { [weak control = self.base] observer in\n                MainScheduler.ensureRunningOnMainThread()\n\n                guard let control = control else {\n                    observer.on(.completed)\n                    return Disposables.create()\n                }\n\n                let controlTarget = ControlTarget(control: control, controlEvents: controlEvents) { _ in\n                    observer.on(.next(()))\n                }\n\n                return Disposables.create(with: controlTarget.dispose)\n            }\n            .take(until: deallocated)"
  },
  {
    "A_name" : "controlTarget",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 27, Column: 17",
    "H_initialValue" : "ControlTarget(control: control, controlEvents: controlEvents) { _ in\n                    observer.on(.next(()))\n                }"
  },
  {
    "A_name" : "controlProperty",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 43, Column: 5",
    "G_members" : [
      {
        "A_name" : "source",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "UIControl+Rx.swift - Line: 48, Column: 9",
        "H_initialValue" : "Observable.create { [weak weakControl = base] observer in\n                guard let control = weakControl else {\n                    observer.on(.completed)\n                    return Disposables.create()\n                }\n\n                observer.on(.next(getter(control)))\n\n                let controlTarget = ControlTarget(control: control, controlEvents: editingEvents) { _ in\n                    if let control = weakControl {\n                        observer.on(.next(getter(control)))\n                    }\n                }\n                \n                return Disposables.create(with: controlTarget.dispose)\n            }\n            .take(until: deallocated)"
      },
      {
        "A_name" : "bindingObserver",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "UIControl+Rx.swift - Line: 66, Column: 9",
        "H_initialValue" : "Binder(base, binding: setter)"
      }
    ],
    "I_parameterType" : [
      "UIControl.Event",
      "@escaping (Base) -> T",
      "@escaping (Base, T) -> Void"
    ],
    "I_parameters" : [
      "editingEvents",
      "getter",
      "setter"
    ],
    "J_returnType" : "-> ControlProperty<T>"
  },
  {
    "A_name" : "source",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 48, Column: 9",
    "H_initialValue" : "Observable.create { [weak weakControl = base] observer in\n                guard let control = weakControl else {\n                    observer.on(.completed)\n                    return Disposables.create()\n                }\n\n                observer.on(.next(getter(control)))\n\n                let controlTarget = ControlTarget(control: control, controlEvents: editingEvents) { _ in\n                    if let control = weakControl {\n                        observer.on(.next(getter(control)))\n                    }\n                }\n                \n                return Disposables.create(with: controlTarget.dispose)\n            }\n            .take(until: deallocated)"
  },
  {
    "A_name" : "controlTarget",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 56, Column: 17",
    "H_initialValue" : "ControlTarget(control: control, controlEvents: editingEvents) { _ in\n                    if let control = weakControl {\n                        observer.on(.next(getter(control)))\n                    }\n                }"
  },
  {
    "A_name" : "bindingObserver",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 66, Column: 9",
    "H_initialValue" : "Binder(base, binding: setter)"
  },
  {
    "A_name" : "controlPropertyWithDefaultEvents",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "UIControl+Rx.swift - Line: 73, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [
      "UIControl.Event",
      "@escaping (Base) -> T",
      "@escaping (Base, T) -> Void"
    ],
    "I_parameters" : [
      "editingEvents",
      "getter",
      "setter"
    ],
    "J_returnType" : "-> ControlProperty<T>"
  }
]